{"version":3,"sources":["enum/AttributeNames.ts","Home.jsx","commonTracing.jsx","automation.jsx","Content.jsx","web-tracer.js","index.jsx"],"names":["AttributeNames","Home","BaseOpenTelemetryComponent","to","getTracing","traceName","spanName","opentelemetry","trace","getTracer","startSpan","React","createContext","useEffect","originalUseEffect","console","log","tracer","EFFECT_SPAN","end","args","apply","useEffectMonkeyPatching","serviceName","provider","WebTracerProvider","resource","Resource","SemanticResourceAttributes","SERVICE_NAME","exporter","CollectorTraceExporter","url","addSpanProcessor","SimpleSpanProcessor","ConsoleSpanExporter","register","contextManager","ZoneContextManager","setTracer","diag","setLogger","DiagConsoleLogger","Tracer","ReactDOM","render","exact","path","component","useState","isLoading","setIsLoading","results","setResults","Button","className","onClick","e","Math","random","fetch","then","response","json","result","variant","size","id","username","document","getElementById"],"mappings":"8KAAaA,E,wDCgBEC,EAZH,SAANA,IACI,IAAIC,IAA2BD,GACrC,OACE,6BACE,qDAGA,kBAAC,IAAD,CAAME,GAAG,SAAQ,4C,uBCTZC,EAAa,SAACC,EAAWC,GAKlC,OAJeC,IAAcC,MACxBC,UAAUJ,GACVK,UAAUJ,I,eFLNN,K,oCAAAA,E,wBAAAA,E,kCAAAA,E,oCAAAA,E,2BAAAA,M,KGWcW,IAAMC,gBAGPD,IAAME,WA+EO,WAEnC,IAAMC,EAAoBH,IAAME,UAChCE,QAAQC,IAAI,mCACZL,IAAME,UAAY,WACdE,QAAQC,IAAI,+BACZ,IAAMC,EAASb,EAAW,qBAAsBJ,EAAekB,aAC/DD,EAAOE,MAH0B,2BAANC,EAAM,yBAANA,EAAM,gBAMjC,OAAON,EAAkBO,MAAMV,IAAOS,IClG9CE,G,4DCIe,SAACC,GACd,IAAMC,EAAW,IAAIC,IAAkB,CACrCC,SAAU,IAAIC,IAAJ,eACLC,IAA2BC,aAAe,yBAI3CC,EAAW,IAAIC,IAAuB,CAC1CC,IAAK,oCAGPR,EAASS,iBAAiB,IAAIC,IAAoB,IAAIC,MACtDX,EAASS,iBAAiB,IAAIC,IAAoBJ,IAElDN,EAASY,SAAS,CAChBC,eAAgB,IAAIC,MAGtB,IAAMrB,EAASO,EAASf,UAAUc,GAElCrB,IAA2BqC,UAAUhB,GACrCiB,IAAKC,UAAU,IAAIC,KCvBrBC,CAAO,sBAEPC,IAASC,OACR,kBAAC,IAAD,KACE,8BACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/C,IACjC,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,QAAQC,UFCd,WACd,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAqCA,OAlCAxC,qBAAU,WAGR,OAFeT,EAAW,qBAAsB,wBACzCe,MACA,WACLJ,QAAQC,IACN,gEAEaZ,EAAW,qBAAsB,0BACzCe,SAER,IAyBD,6BACE,qDACA,kBAACmC,EAAA,EAAD,CACEC,UAAU,MACVC,QApBgB,SAACC,GACrBN,GAAa,GACOO,KAAKC,SAAzB,IACM1C,EAASb,EAAW,qBAAsB,wBAiClDW,QAAQC,IAAI,0CACL4C,MAAM,0CA/BRC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLjD,QAAQC,IAAIgD,GACZ/C,EAAOE,MACPgC,GAAa,GACbE,EAAWW,OAUXC,QAAQ,UACRC,KAAK,MAJP,gBAQA,yBAAKC,GAAG,UAAUZ,UAAU,OACzBL,GAAa,oDACbE,GAAW,6CAAmBA,EAAQgB,iBElD9CC,SAASC,eAAe,W","file":"static/js/main.2cbba79f.chunk.js","sourcesContent":["export  enum AttributeNames {\r\n    EFFECT_SPAN = \"reactLoad: useEffects\",\r\n    LOCATION_URL = \"location\",\r\n    REACT_NAME = \"react_component_name\",\r\n    REACT_STATE = \"react_component_state\",\r\n    REACT_ERROR = \"react_error\"\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { BaseOpenTelemetryComponent } from '@opentelemetry/plugin-react-load';\r\n\r\nconst Home =()=>{ \r\n  let obj=new BaseOpenTelemetryComponent(Home);\r\n    return (\r\n      <div>\r\n        <h1>\r\n          React Plugin Demo App\r\n        </h1>\r\n        <Link to='/test'><button>Enter</button></Link>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import opentelemetry from \"@opentelemetry/api\";\r\n\r\nexport const getTracing = (traceName, spanName) => {\r\n    const tracer = opentelemetry.trace\r\n        .getTracer(traceName)\r\n        .startSpan(spanName);\r\n\r\n    return tracer;\r\n}\r\n\r\n","import shimmer from \"shimmer\";\r\nimport { AttributeNames } from \"./enum/AttributeNames\";\r\nimport { getTracing } from \"./commonTracing\";\r\nimport api from \"@opentelemetry/api\";\r\nimport React from 'react';\r\n\r\n/**Steps to follow\r\n * start the span \r\n * set te parent space by setting the actice context \r\n * */\r\nconst self = this;\r\nexport const UserContext = React.createContext();\r\n\r\n//  Make a copy of the original add function \r\nconst originalUseEffect = React.useEffect;\r\nexport const _instrumentFunction = (react, span, original) => {\r\n\r\n    let wasError = false;\r\n    try {\r\n        return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\r\n            return original();\r\n        });\r\n    }\r\n    catch (err) {\r\n        span.setAttribute(AttributeNames.REACT_ERROR, err.stack);\r\n        wasError = true;\r\n        throw err;\r\n    }\r\n    finally {\r\n        span.end();\r\n\r\n    }\r\n}\r\n\r\n/**\r\n     * Patches the render lifecycle method\r\n     */\r\nexport const _patchUseEffect = () => {\r\n    // return (original) => {\r\n    const plugin = this;\r\n    // return function patchUseEffect(...args) {\r\n\r\n    //setting the span \r\n    // const tracer = getTracing(\"example-react-load\", AttributeNames.EFFECT_SPAN);\r\n    // tracer.end();\r\n    // const apply = plugin._instrumentFunction(this, 'componentDidMount', tracer, () => {\r\n    //     return original.apply(this, args);\r\n    // });\r\n\r\n    // return original.apply(this, args);        \r\n    //  };\r\n    // };\r\n}\r\n\r\n\r\n\r\n/**\r\n     * Patches the setState function\r\n     */\r\nexport const _patchSetState = () => {\r\n    return (original) => {\r\n        const plugin = this;\r\n        return function patchSetState(...args) {\r\n            const tracer = getTracing(\"example-react-load\", AttributeNames.EFFECT_SPAN);\r\n            tracer.end();\r\n\r\n            //     const parentSpan = plugin._getParentSpan(this, AttributeNames_1.AttributeNames.UPDATING_SPAN);\r\n            return plugin._instrumentFunction(this, 'setState()', tracer, () => {\r\n                return original.apply(this, args);\r\n            });\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n    * patch function which wraps all the lifecycle methods\r\n    */\r\nexport const patch = () => {\r\n    console.log(\"Patch function called\")\r\n    console.log(\"context\", UserContext)\r\n\r\n    // // Make a copy of the original add function \r\n    // const origUseEffect = React.useEffect;\r\n    // React.useEffect = function() {\r\n    //     //console.log(`Adding the result of ${a} and ${b}`);\r\n    //     return origUseEffect();\r\n    // }\r\n    shimmer.wrap(React.useEffect, 'useEffect', _patchUseEffect());\r\n    //  shimmer.wrap(this, 'setState',_patchSetState());\r\n}\r\n\r\n\r\n\r\nexport const useEffectMonkeyPatching = () => {\r\n    //  Make a copy of the original add function \r\n    const originalUseEffect = React.useEffect;\r\n    console.log(\"tracerUseEffect function called\");\r\n    React.useEffect = function (...args) {\r\n        console.log(\"Tracking use effect called \");\r\n        const tracer = getTracing(\"example-react-load\", AttributeNames.EFFECT_SPAN);\r\n        tracer.end();\r\n\r\n        //  return originalUseEffect();\r\n        return originalUseEffect.apply(React, args);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n    * unpatch function to unwrap all the lifecycle methods\r\n    */\r\nexport const unpatch = () => {\r\n    console.log(\"Unpatch method called\")\r\n    shimmer.unwrap(this, 'useEffect');\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { getTracing } from \"./commonTracing\";\r\nimport { useEffectMonkeyPatching} from \"./automation\";\r\n\r\nuseEffectMonkeyPatching();\r\n//  //  Make a copy of the original add function \r\n//  const originalUseEffect = React.useEffect;\r\n// React.useEffect = function (...args) {\r\n//   console.log(\"Use effect called by monkey patching\");\r\n//  //  return originalUseEffect();\r\n//       return originalUseEffect.apply(React,args);\r\n// }\r\n\r\nexport default  function Content() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [results, setResults] = useState(null);\r\n\r\n   \r\n  useEffect(() => {\r\n    const tracer = getTracing(\"example-react-load\", \"reactload-: mounting\");\r\n    tracer.end();\r\n    return () => {\r\n      console.log(\r\n        \"Behavior right before the component is removed from the DOM.\"\r\n      );\r\n      const tracer = getTracing(\"example-react-load\", \"reactload-: unmounting\");\r\n      tracer.end();\r\n    };\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   //tracerUseEffect();\r\n  //   console.log(\"Behavior when the component receives new state or props.\");\r\n  //   const tracer = getTracing(\"example-react-load\", \"reactload-: updating\");\r\n  //   tracer.end();\r\n  // });\r\n\r\n  const buttonHandler = (e) => {\r\n    setIsLoading(true);\r\n    const randomDelay = Math.random() * 10000;\r\n    const tracer = getTracing(\"example-react-load\", \"reactload: btnClick\");\r\n\r\n    fetchAPI()\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        tracer.end();\r\n        setIsLoading(false);\r\n        setResults(result);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>React Plugin Demo App</h1>\r\n      <Button\r\n        className=\"m-3\"\r\n        onClick={buttonHandler}\r\n        variant=\"primary\"\r\n        size=\"lg\"\r\n      >\r\n        Make Request\r\n      </Button>\r\n      <div id=\"results\" className=\"m-3\">\r\n        {isLoading && <div> Loading results...</div>}\r\n        {results && <div>Username is: {results.username}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction fetchAPI() {\r\n  // param is a highlighted word from the user before it clicked the button\r\n  console.log(\"================= trigger api=========\");\r\n  return fetch(\"http://hn.algolia.com/api/v1/users/pg\");\r\n}\r\n\r\n//export default Content;\r\n","import { ConsoleSpanExporter, SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { BaseOpenTelemetryComponent } from '@opentelemetry/plugin-react-load';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { CollectorTraceExporter } from '@opentelemetry/exporter-collector';\nimport { diag, DiagConsoleLogger } from '@opentelemetry/api';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions'\n\nexport default (serviceName) => {\n  const provider = new WebTracerProvider({\n    resource: new Resource({\n        [SemanticResourceAttributes.SERVICE_NAME]: \"react-load-example\"\n    }),\n  });\n\n  const exporter = new CollectorTraceExporter({\n    url: 'http://localhost:55678/v1/trace',\n  });\n\n  provider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n  provider.addSpanProcessor(new SimpleSpanProcessor(exporter));\n\n  provider.register({\n    contextManager: new ZoneContextManager(),\n  });\n\n  const tracer = provider.getTracer(serviceName);\n\n  BaseOpenTelemetryComponent.setTracer(serviceName)\n  diag.setLogger(new DiagConsoleLogger());\n\n  return tracer;\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport Content from './Content';\r\nimport Tracer from './web-tracer.js';\r\n\r\nTracer('example-react-load')\r\n\r\nReactDOM.render(\r\n\t<Router>\r\n\t  <main>\r\n\t\t  <Route exact path='/' component={Home}/>\r\n\t\t  <Route exact path='/test' component={Content}/>\r\n\t  </main>\r\n\t</Router>\r\n,document.getElementById('root'));\r\n"],"sourceRoot":""}