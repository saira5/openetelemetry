import * as React from 'react';
export declare type RenderFunction = () => React.ReactNode;
export declare type ComponentDidMountFunction = (() => void) | undefined;
export declare type ComponentDidUpdateFunction = ((prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) => void) | undefined;
export declare type ShouldComponentUpdateFunction = ((nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any) => boolean) | undefined;
export declare type SetStateFunction = <K extends never>(state: any | ((prevState: Readonly<any>, props: Readonly<any>) => any | Pick<any, K> | null) | Pick<any, K> | null, callback?: (() => void) | undefined) => void;
export declare type ForceUpdateFunction = (callback?: (() => void) | undefined) => void;
export declare type GetSnapshotBeforeUpdateFunction = ((prevProps: Readonly<any>, prevState: Readonly<any>) => any) | undefined;
export declare type ComponentWillUnmountFunction = (() => void) | undefined;
//# sourceMappingURL=types.d.ts.map