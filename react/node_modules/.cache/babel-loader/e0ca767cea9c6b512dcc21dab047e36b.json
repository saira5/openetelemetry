{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode, hrTimeToMicroseconds } from '@opentelemetry/core';\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\n\nvar ConsoleSpanExporter =\n/** @class */\nfunction () {\n  function ConsoleSpanExporter() {}\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n\n\n  ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n    return this._sendSpans(spans, resultCallback);\n  };\n  /**\n   * Shutdown the exporter.\n   */\n\n\n  ConsoleSpanExporter.prototype.shutdown = function () {\n    this._sendSpans([]);\n\n    return Promise.resolve();\n  };\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n\n\n  ConsoleSpanExporter.prototype._exportInfo = function (span) {\n    return {\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events\n    };\n  };\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n\n\n  ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n    for (var _i = 0, spans_1 = spans; _i < spans_1.length; _i++) {\n      var span = spans_1[_i];\n      console.log(this._exportInfo(span));\n    }\n\n    if (done) {\n      return done({\n        code: ExportResultCode.SUCCESS\n      });\n    }\n  };\n\n  return ConsoleSpanExporter;\n}();\n\nexport { ConsoleSpanExporter };","map":{"version":3,"sources":["../../../src/export/ConsoleSpanExporter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAIH,SAEE,gBAFF,EAGE,oBAHF,QAIO,qBAJP;AAMA;;;AAGG;;AAEH;;AACA,IAAA,mBAAA;AAAA;AAAA,YAAA;EAAA,SAAA,mBAAA,GAAA,CAwDC;EAvDC;;;;AAIG;;;EACH,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UACE,KADF,EAEE,cAFF,EAEgD;IAE9C,OAAO,KAAK,UAAL,CAAgB,KAAhB,EAAuB,cAAvB,CAAP;EACD,CALD;EAOA;;AAEG;;;EACH,mBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE,KAAK,UAAL,CAAgB,EAAhB;;IACA,OAAO,OAAO,CAAC,OAAR,EAAP;EACD,CAHD;EAKA;;;AAGG;;;EACK,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,IAApB,EAAsC;IACpC,OAAO;MACL,OAAO,EAAE,IAAI,CAAC,WAAL,GAAmB,OADvB;MAEL,QAAQ,EAAE,IAAI,CAAC,YAFV;MAGL,IAAI,EAAE,IAAI,CAAC,IAHN;MAIL,EAAE,EAAE,IAAI,CAAC,WAAL,GAAmB,MAJlB;MAKL,IAAI,EAAE,IAAI,CAAC,IALN;MAML,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,SAAN,CAN1B;MAOL,QAAQ,EAAE,oBAAoB,CAAC,IAAI,CAAC,QAAN,CAPzB;MAQL,UAAU,EAAE,IAAI,CAAC,UARZ;MASL,MAAM,EAAE,IAAI,CAAC,MATR;MAUL,MAAM,EAAE,IAAI,CAAC;IAVR,CAAP;EAYD,CAbO;EAeR;;;;AAIG;;;EACK,mBAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UACE,KADF,EAEE,IAFF,EAEuC;IAErC,KAAmB,IAAA,EAAA,GAAA,CAAA,EAAA,OAAA,GAAA,KAAnB,EAAmB,EAAA,GAAA,OAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAA0B;MAArB,IAAM,IAAI,GAAA,OAAA,CAAA,EAAA,CAAV;MACH,OAAO,CAAC,GAAR,CAAY,KAAK,WAAL,CAAiB,IAAjB,CAAZ;IACD;;IACD,IAAI,IAAJ,EAAU;MACR,OAAO,IAAI,CAAC;QAAE,IAAI,EAAE,gBAAgB,CAAC;MAAzB,CAAD,CAAX;IACD;EACF,CAVO;;EAWV,OAAA,mBAAA;AAAC,CAxDD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode, hrTimeToMicroseconds, } from '@opentelemetry/core';\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleSpanExporter = /** @class */ (function () {\n    function ConsoleSpanExporter() {\n    }\n    /**\n     * Export spans.\n     * @param spans\n     * @param resultCallback\n     */\n    ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n        return this._sendSpans(spans, resultCallback);\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    ConsoleSpanExporter.prototype.shutdown = function () {\n        this._sendSpans([]);\n        return Promise.resolve();\n    };\n    /**\n     * converts span info into more readable format\n     * @param span\n     */\n    ConsoleSpanExporter.prototype._exportInfo = function (span) {\n        return {\n            traceId: span.spanContext().traceId,\n            parentId: span.parentSpanId,\n            name: span.name,\n            id: span.spanContext().spanId,\n            kind: span.kind,\n            timestamp: hrTimeToMicroseconds(span.startTime),\n            duration: hrTimeToMicroseconds(span.duration),\n            attributes: span.attributes,\n            status: span.status,\n            events: span.events,\n        };\n    };\n    /**\n     * Showing spans in console\n     * @param spans\n     * @param done\n     */\n    ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n        for (var _i = 0, spans_1 = spans; _i < spans_1.length; _i++) {\n            var span = spans_1[_i];\n            console.log(this._exportInfo(span));\n        }\n        if (done) {\n            return done({ code: ExportResultCode.SUCCESS });\n        }\n    };\n    return ConsoleSpanExporter;\n}());\nexport { ConsoleSpanExporter };\n//# sourceMappingURL=ConsoleSpanExporter.js.map"]},"metadata":{},"sourceType":"module"}