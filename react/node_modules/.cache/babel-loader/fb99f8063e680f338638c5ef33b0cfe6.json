{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\n\nexport function loggingErrorHandler() {\n  return function (ex) {\n    diag.error(stringifyException(ex));\n  };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\n\nfunction stringifyException(ex) {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\n\n\nfunction flattenException(ex) {\n  var result = {};\n  var current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n      if (result[propertyName]) return;\n      var value = current[propertyName];\n\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/common/logging-error-handler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,IAAT,QAAgC,oBAAhC;AAGA;;;AAGG;;AACH,OAAM,SAAU,mBAAV,GAA6B;EACjC,OAAO,UAAC,EAAD,EAAc;IACnB,IAAI,CAAC,KAAL,CAAW,kBAAkB,CAAC,EAAD,CAA7B;EACD,CAFD;AAGD;AAED;;;AAGG;;AACH,SAAS,kBAAT,CAA4B,EAA5B,EAAkD;EAChD,IAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;IAC1B,OAAO,EAAP;EACD,CAFD,MAEO;IACL,OAAO,IAAI,CAAC,SAAL,CAAe,gBAAgB,CAAC,EAAD,CAA/B,CAAP;EACD;AACF;AAED;;;;AAIG;;;AACH,SAAS,gBAAT,CAA0B,EAA1B,EAAuC;EACrC,IAAM,MAAM,GAAG,EAAf;EACA,IAAI,OAAO,GAAG,EAAd;;EAEA,OAAO,OAAO,KAAK,IAAnB,EAAyB;IACvB,MAAM,CAAC,mBAAP,CAA2B,OAA3B,EAAoC,OAApC,CAA4C,UAAA,YAAA,EAAY;MACtD,IAAI,MAAM,CAAC,YAAD,CAAV,EAA0B;MAC1B,IAAM,KAAK,GAAG,OAAO,CAAC,YAAD,CAArB;;MACA,IAAI,KAAJ,EAAW;QACT,MAAM,CAAC,YAAD,CAAN,GAAuB,MAAM,CAAC,KAAD,CAA7B;MACD;IACF,CAND;IAOA,OAAO,GAAG,MAAM,CAAC,cAAP,CAAsB,OAAtB,CAAV;EACD;;EAED,OAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return function (ex) {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map"]},"metadata":{},"sourceType":"module"}