{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision, isValidTraceId } from '@opentelemetry/api';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\n\nvar TraceIdRatioBasedSampler =\n/** @class */\nfunction () {\n  function TraceIdRatioBasedSampler(_ratio) {\n    if (_ratio === void 0) {\n      _ratio = 0;\n    }\n\n    this._ratio = _ratio;\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n    return {\n      decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD\n    };\n  };\n\n  TraceIdRatioBasedSampler.prototype.toString = function () {\n    return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n  };\n\n  TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  };\n\n  TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n    var accumulation = 0;\n\n    for (var i = 0; i < traceId.length / 8; i++) {\n      var pos = i * 8;\n      var part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n\n    return accumulation;\n  };\n\n  return TraceIdRatioBasedSampler;\n}();\n\nexport { TraceIdRatioBasedSampler };","map":{"version":3,"sources":["../../../../src/trace/sampler/TraceIdRatioBasedSampler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAEE,gBAFF,EAIE,cAJF,QAKO,oBALP;AAOA;;AACA,IAAA,wBAAA;AAAA;AAAA,YAAA;EAGE,SAAA,wBAAA,CAA6B,MAA7B,EAA+C;IAAlB,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,CAAA;IAAkB;;IAAlB,KAAA,MAAA,GAAA,MAAA;IAC3B,KAAK,MAAL,GAAc,KAAK,UAAL,CAAgB,MAAhB,CAAd;IACA,KAAK,WAAL,GAAmB,IAAI,CAAC,KAAL,CAAW,KAAK,MAAL,GAAc,UAAzB,CAAnB;EACD;;EAED,wBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,OAAb,EAA+B,OAA/B,EAA8C;IAC5C,OAAO;MACL,QAAQ,EACN,cAAc,CAAC,OAAD,CAAd,IAA2B,KAAK,WAAL,CAAiB,OAAjB,IAA4B,KAAK,WAA5D,GACI,gBAAgB,CAAC,kBADrB,GAEI,gBAAgB,CAAC;IAJlB,CAAP;EAMD,CAPD;;EASA,wBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE,OAAO,uBAAqB,KAAK,MAA1B,GAAgC,GAAvC;EACD,CAFD;;EAIQ,wBAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,KAAnB,EAAgC;IAC9B,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,CAAC,KAAD,CAAtC,EAA+C,OAAO,CAAP;IAC/C,OAAO,KAAK,IAAI,CAAT,GAAa,CAAb,GAAiB,KAAK,IAAI,CAAT,GAAa,CAAb,GAAiB,KAAzC;EACD,CAHO;;EAKA,wBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,OAApB,EAAmC;IACjC,IAAI,YAAY,GAAG,CAAnB;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAAR,GAAiB,CAArC,EAAwC,CAAC,EAAzC,EAA6C;MAC3C,IAAM,GAAG,GAAG,CAAC,GAAG,CAAhB;MACA,IAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAR,CAAc,GAAd,EAAmB,GAAG,GAAG,CAAzB,CAAD,EAA8B,EAA9B,CAArB;MACA,YAAY,GAAG,CAAC,YAAY,GAAG,IAAhB,MAA0B,CAAzC;IACD;;IACD,OAAO,YAAP;EACD,CARO;;EASV,OAAA,wBAAA;AAAC,CAnCD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision, isValidTraceId, } from '@opentelemetry/api';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\nexport { TraceIdRatioBasedSampler };\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map"]},"metadata":{},"sourceType":"module"}