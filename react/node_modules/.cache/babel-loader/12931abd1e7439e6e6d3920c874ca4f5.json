{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { MetricKind } from './export/types';\n/** This is a SDK implementation of SumObserver Metric. */\n\nvar SumObserverMetric =\n/** @class */\nfunction (_super) {\n  __extends(SumObserverMetric, _super);\n\n  function SumObserverMetric(name, options, processor, resource, instrumentationLibrary, callback) {\n    return _super.call(this, name, options, processor, resource, MetricKind.SUM_OBSERVER, instrumentationLibrary, callback) || this;\n  }\n\n  SumObserverMetric.prototype._processResults = function (observerResult) {\n    var _this = this;\n\n    observerResult.values.forEach(function (value, labels) {\n      var instrument = _this.bind(labels); // SumObserver is monotonic which means it should only accept values\n      // greater or equal then previous value\n\n\n      var previous = instrument.getAggregator().toPoint();\n      var previousValue = -Infinity;\n\n      if (previous.timestamp[0] !== 0 || previous.timestamp[1] !== 0) {\n        previousValue = previous.value;\n      }\n\n      if (value >= previousValue) {\n        instrument.update(value);\n      }\n    });\n  };\n\n  return SumObserverMetric;\n}(BaseObserverMetric);\n\nexport { SumObserverMetric };","map":{"version":3,"sources":["../../src/SumObserverMetric.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKH,SAAS,kBAAT,QAAmC,sBAAnC;AAEA,SAAoB,UAApB,QAAsC,gBAAtC;AAGA;;AACA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EACU,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;;EAER,SAAA,iBAAA,CACE,IADF,EAEE,OAFF,EAGE,SAHF,EAIE,QAJF,EAKE,sBALF,EAME,QANF,EAM4D;WAE1D,MAAA,CAAA,IAAA,CAAA,IAAA,EACE,IADF,EAEE,OAFF,EAGE,SAHF,EAIE,QAJF,EAKE,UAAU,CAAC,YALb,EAME,sBANF,EAOE,QAPF,KAQC,I;EACF;;EAEkB,iBAAA,CAAA,SAAA,CAAA,eAAA,GAAnB,UAAmC,cAAnC,EAAiE;IAAjE,IAAA,KAAA,GAAA,IAAA;;IACE,cAAc,CAAC,MAAf,CAAsB,OAAtB,CAA8B,UAAC,KAAD,EAAQ,MAAR,EAAc;MAC1C,IAAM,UAAU,GAAG,KAAI,CAAC,IAAL,CAAU,MAAV,CAAnB,CAD0C,CAE1C;MACA;;;MACA,IAAM,QAAQ,GAAG,UAAU,CAAC,aAAX,GAA2B,OAA3B,EAAjB;MACA,IAAI,aAAa,GAAG,CAAC,QAArB;;MACA,IAAI,QAAQ,CAAC,SAAT,CAAmB,CAAnB,MAA0B,CAA1B,IAA+B,QAAQ,CAAC,SAAT,CAAmB,CAAnB,MAA0B,CAA7D,EAAgE;QAC9D,aAAa,GAAG,QAAQ,CAAC,KAAzB;MACD;;MACD,IAAI,KAAK,IAAI,aAAb,EAA4B;QAC1B,UAAU,CAAC,MAAX,CAAkB,KAAlB;MACD;IACF,CAZD;EAaD,CAdkB;;EAerB,OAAA,iBAAA;AAAC,CArCD,CACU,kBADV,CAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { MetricKind } from './export/types';\n/** This is a SDK implementation of SumObserver Metric. */\nvar SumObserverMetric = /** @class */ (function (_super) {\n    __extends(SumObserverMetric, _super);\n    function SumObserverMetric(name, options, processor, resource, instrumentationLibrary, callback) {\n        return _super.call(this, name, options, processor, resource, MetricKind.SUM_OBSERVER, instrumentationLibrary, callback) || this;\n    }\n    SumObserverMetric.prototype._processResults = function (observerResult) {\n        var _this = this;\n        observerResult.values.forEach(function (value, labels) {\n            var instrument = _this.bind(labels);\n            // SumObserver is monotonic which means it should only accept values\n            // greater or equal then previous value\n            var previous = instrument.getAggregator().toPoint();\n            var previousValue = -Infinity;\n            if (previous.timestamp[0] !== 0 || previous.timestamp[1] !== 0) {\n                previousValue = previous.value;\n            }\n            if (value >= previousValue) {\n                instrument.update(value);\n            }\n        });\n    };\n    return SumObserverMetric;\n}(BaseObserverMetric));\nexport { SumObserverMetric };\n//# sourceMappingURL=SumObserverMetric.js.map"]},"metadata":{},"sourceType":"module"}