{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trace, context, propagation, diag } from '@opentelemetry/api';\nimport { CompositePropagator, HttpBaggagePropagator, HttpTraceContextPropagator, getEnv } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { Tracer } from '.';\nimport { DEFAULT_CONFIG } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor'; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nvar merge = require('lodash.merge');\n\nimport { BatchSpanProcessor } from './platform';\nexport var ForceFlushState;\n\n(function (ForceFlushState) {\n  ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n  ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n  ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n  ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\n\n\nvar BasicTracerProvider =\n/** @class */\nfunction () {\n  function BasicTracerProvider(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _a;\n\n    this._registeredSpanProcessors = [];\n    this._tracers = new Map();\n    var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n    this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource\n    });\n\n    var defaultExporter = this._buildExporterFromEnv();\n\n    if (defaultExporter !== undefined) {\n      var batchProcessor = new BatchSpanProcessor(defaultExporter);\n      this.activeSpanProcessor = batchProcessor;\n    } else {\n      this.activeSpanProcessor = new NoopSpanProcessor();\n    }\n  }\n\n  BasicTracerProvider.prototype.getTracer = function (name, version) {\n    var key = name + \"@\" + (version || '');\n\n    if (!this._tracers.has(key)) {\n      this._tracers.set(key, new Tracer({\n        name: name,\n        version: version\n      }, this._config, this));\n    }\n\n    return this._tracers.get(key);\n  };\n  /**\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n\n\n  BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor.shutdown().catch(function (err) {\n        return diag.error('Error while trying to shutdown current span processor', err);\n      });\n    }\n\n    this._registeredSpanProcessors.push(spanProcessor);\n\n    this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n  };\n\n  BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n    return this.activeSpanProcessor;\n  };\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n\n\n  BasicTracerProvider.prototype.register = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    trace.setGlobalTracerProvider(this);\n\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n\n    if (config.contextManager) {\n      context.setGlobalContextManager(config.contextManager);\n    }\n\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    }\n  };\n\n  BasicTracerProvider.prototype.forceFlush = function () {\n    var timeout = this._config.forceFlushTimeoutMillis;\n\n    var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n      return new Promise(function (resolve) {\n        var state;\n        var timeoutInterval = setTimeout(function () {\n          resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n          state = ForceFlushState.timeout;\n        }, timeout);\n        spanProcessor.forceFlush().then(function () {\n          clearTimeout(timeoutInterval);\n\n          if (state !== ForceFlushState.timeout) {\n            state = ForceFlushState.resolved;\n            resolve(state);\n          }\n        }).catch(function (error) {\n          clearTimeout(timeoutInterval);\n          state = ForceFlushState.error;\n          resolve(error);\n        });\n      });\n    });\n\n    return new Promise(function (resolve, reject) {\n      Promise.all(promises).then(function (results) {\n        var errors = results.filter(function (result) {\n          return result !== ForceFlushState.resolved;\n        });\n\n        if (errors.length > 0) {\n          reject(errors);\n        } else {\n          resolve();\n        }\n      }).catch(function (error) {\n        return reject([error]);\n      });\n    });\n  };\n\n  BasicTracerProvider.prototype.shutdown = function () {\n    return this.activeSpanProcessor.shutdown();\n  };\n\n  BasicTracerProvider.prototype._getPropagator = function (name) {\n    var _a;\n\n    return (_a = BasicTracerProvider._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n  };\n\n  BasicTracerProvider.prototype._getSpanExporter = function (name) {\n    var _a;\n\n    return (_a = BasicTracerProvider._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n  };\n\n  BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n    var _this = this; // per spec, propagators from env must be deduplicated\n\n\n    var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n    var propagators = uniquePropagatorNames.map(function (name) {\n      var propagator = _this._getPropagator(name);\n\n      if (!propagator) {\n        diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n      }\n\n      return propagator;\n    });\n    var validPropagators = propagators.reduce(function (list, item) {\n      if (item) {\n        list.push(item);\n      }\n\n      return list;\n    }, []);\n\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators\n      });\n    }\n  };\n\n  BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n    var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none') return;\n\n    var exporter = this._getSpanExporter(exporterName);\n\n    if (!exporter) {\n      diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n    }\n\n    return exporter;\n  };\n\n  BasicTracerProvider._registeredPropagators = new Map([['tracecontext', function () {\n    return new HttpTraceContextPropagator();\n  }], ['baggage', function () {\n    return new HttpBaggagePropagator();\n  }]]);\n  BasicTracerProvider._registeredExporters = new Map();\n  return BasicTracerProvider;\n}();\n\nexport { BasicTracerProvider };","map":{"version":3,"sources":["../../src/BasicTracerProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trace, context, propagation, diag, } from '@opentelemetry/api';\nimport { CompositePropagator, HttpBaggagePropagator, HttpTraceContextPropagator, getEnv, } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { Tracer } from '.';\nimport { DEFAULT_CONFIG } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar merge = require('lodash.merge');\nimport { BatchSpanProcessor } from './platform';\nexport var ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n        this.resource = Resource.default().merge(this.resource);\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        var defaultExporter = this._buildExporterFromEnv();\n        if (defaultExporter !== undefined) {\n            var batchProcessor = new BatchSpanProcessor(defaultExporter);\n            this.activeSpanProcessor = batchProcessor;\n        }\n        else {\n            this.activeSpanProcessor = new NoopSpanProcessor();\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version) {\n        var key = name + \"@\" + (version || '');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new Tracer({ name: name, version: version }, this._config, this));\n        }\n        return this._tracers.get(key);\n    };\n    /**\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return diag.error('Error while trying to shutdown current span processor', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = BasicTracerProvider._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = BasicTracerProvider._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n        if (exporterName === 'none')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        ['tracecontext', function () { return new HttpTraceContextPropagator(); }],\n        ['baggage', function () { return new HttpBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\nexport { BasicTracerProvider };\n//# sourceMappingURL=BasicTracerProvider.js.map"]},"metadata":{},"sourceType":"module"}