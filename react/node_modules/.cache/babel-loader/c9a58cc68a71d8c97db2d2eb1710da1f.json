{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\n\nvar ProxyTracerProvider =\n/** @class */\nfunction () {\n  function ProxyTracerProvider() {}\n  /**\n   * Get a {@link ProxyTracer}\n   */\n\n\n  ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n    var _a;\n\n    return (_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version, options);\n  };\n\n  ProxyTracerProvider.prototype.getDelegate = function () {\n    var _a;\n\n    return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n  };\n  /**\n   * Set the delegate tracer provider\n   */\n\n\n  ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n    this._delegate = delegate;\n  };\n\n  ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n    var _a;\n\n    return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n  };\n\n  return ProxyTracerProvider;\n}();\n\nexport { ProxyTracerProvider };","map":{"version":3,"sources":["../../../src/trace/ProxyTracerProvider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAIH,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AAGA,IAAM,oBAAoB,GAAG,IAAI,kBAAJ,EAA7B;AAEA;;;;;;;AAOG;;AACH,IAAA,mBAAA;AAAA;AAAA,YAAA;EAAA,SAAA,mBAAA,GAAA,CA+BC;EA5BC;;AAEG;;;EACH,mBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAA0C,OAA1C,EAAiE;;;IAC/D,OACE,CAAA,EAAA,GAAA,KAAK,iBAAL,CAAuB,IAAvB,EAA6B,OAA7B,EAAsC,OAAtC,CAAA,MAA8C,IAA9C,IAA8C,EAAA,KAAA,KAAA,CAA9C,GAA8C,EAA9C,GACA,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,OAA5B,EAAqC,OAArC,CAFF;EAID,CALD;;EAOA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;;;IACE,OAAO,CAAA,EAAA,GAAA,KAAK,SAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,oBAAzB;EACD,CAFD;EAIA;;AAEG;;;EACH,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAAoC;IAClC,KAAK,SAAL,GAAiB,QAAjB;EACD,CAFD;;EAIA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,IADF,EAEE,OAFF,EAGE,OAHF,EAGyB;;;IAEvB,OAAO,CAAA,EAAA,GAAA,KAAK,SAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,SAAF,CAAY,IAAZ,EAAkB,OAAlB,EAA2B,OAA3B,CAArB;EACD,CAND;;EAOF,OAAA,mBAAA;AAAC,CA/BD,EAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}