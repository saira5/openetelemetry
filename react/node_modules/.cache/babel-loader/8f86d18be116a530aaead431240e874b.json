{"ast":null,"code":"var SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\n\nvar RandomIdGenerator =\n/** @class */\nfunction () {\n  function RandomIdGenerator() {\n    /**\n     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n     * characters corresponding to 128 bits.\n     */\n    this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n    /**\n     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n     * characters corresponding to 64 bits.\n     */\n\n    this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n  }\n\n  return RandomIdGenerator;\n}();\n\nexport { RandomIdGenerator };\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\n\nfunction getIdGenerator(bytes) {\n  return function generateId() {\n    for (var i = 0; i < bytes * 2; i++) {\n      SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48; // valid hex characters in the range 48-57 and 97-102\n\n      if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n        SHARED_CHAR_CODES_ARRAY[i] += 39;\n      }\n    }\n\n    return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n  };\n}","map":{"version":3,"sources":["../../../../src/platform/browser/RandomIdGenerator.ts"],"names":[],"mappings":"AAiBA,IAAM,aAAa,GAAG,CAAtB;AACA,IAAM,cAAc,GAAG,EAAvB;;AAEA,IAAA,iBAAA;AAAA;AAAA,YAAA;EAAA,SAAA,iBAAA,GAAA;IACE;;;AAGG;IACH,KAAA,eAAA,GAAkB,cAAc,CAAC,cAAD,CAAhC;IAEA;;;AAGG;;IACH,KAAA,cAAA,GAAiB,cAAc,CAAC,aAAD,CAA/B;EACD;;EAAD,OAAA,iBAAA;AAAC,CAZD,EAAA;;;AAcA,IAAM,uBAAuB,GAAG,KAAK,CAAC,EAAD,CAArC;;AACA,SAAS,cAAT,CAAwB,KAAxB,EAAqC;EACnC,OAAO,SAAS,UAAT,GAAmB;IACxB,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,GAAG,CAA5B,EAA+B,CAAC,EAAhC,EAAoC;MAClC,uBAAuB,CAAC,CAAD,CAAvB,GAA6B,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,EAA3B,IAAiC,EAA9D,CADkC,CAElC;;MACA,IAAI,uBAAuB,CAAC,CAAD,CAAvB,IAA8B,EAAlC,EAAsC;QACpC,uBAAuB,CAAC,CAAD,CAAvB,IAA8B,EAA9B;MACD;IACF;;IACD,OAAO,MAAM,CAAC,YAAP,CAAoB,KAApB,CACL,IADK,EAEL,uBAAuB,CAAC,KAAxB,CAA8B,CAA9B,EAAiC,KAAK,GAAG,CAAzC,CAFK,CAAP;EAID,CAZD;AAaD","sourceRoot":"","sourcesContent":["var SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\nexport { RandomIdGenerator };\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes * 2; i++) {\n            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n            // valid hex characters in the range 48-57 and 97-102\n            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n                SHARED_CHAR_CODES_ARRAY[i] += 39;\n            }\n        }\n        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map"]},"metadata":{},"sourceType":"module"}