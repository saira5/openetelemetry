{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Resource } from '@opentelemetry/resources';\nimport { Meter } from '.';\nimport { DEFAULT_CONFIG } from './types'; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nvar merge = require('lodash.merge');\n/**\n * This class represents a meter provider which platform libraries can extend\n */\n\n\nvar MeterProvider =\n/** @class */\nfunction () {\n  function MeterProvider(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this._meters = new Map();\n    this._shuttingDownPromise = Promise.resolve();\n    this._isShutdown = false;\n    var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n    this.resource = mergedConfig.resource || Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource\n    });\n  }\n  /**\n   * Returns a Meter, creating one if one with the given name and version is not already created\n   *\n   * @returns Meter A Meter with the given name and version\n   */\n\n\n  MeterProvider.prototype.getMeter = function (name, version, config) {\n    var key = name + \"@\" + (version || '');\n\n    if (!this._meters.has(key)) {\n      this._meters.set(key, new Meter({\n        name: name,\n        version: version\n      }, config || this._config));\n    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    return this._meters.get(key);\n  };\n\n  MeterProvider.prototype.shutdown = function () {\n    var _this = this;\n\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n\n    this._isShutdown = true;\n    this._shuttingDownPromise = new Promise(function (resolve, reject) {\n      Promise.resolve().then(function () {\n        return Promise.all(Array.from(_this._meters, function (_a) {\n          var _ = _a[0],\n              meter = _a[1];\n          return meter.shutdown();\n        }));\n      }).then(function () {\n        if (_this._config.exporter) {\n          return _this._config.exporter.shutdown();\n        }\n\n        return;\n      }).then(resolve).catch(function (e) {\n        reject(e);\n      });\n    });\n    return this._shuttingDownPromise;\n  };\n\n  return MeterProvider;\n}();\n\nexport { MeterProvider };","map":{"version":3,"sources":["../../src/MeterProvider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAS,QAAT,QAAyB,0BAAzB;AACA,SAAS,KAAT,QAAsB,GAAtB;AACA,SAAS,cAAT,QAA4C,SAA5C,C,CACA;;AACA,IAAM,KAAK,GAAG,OAAO,CAAC,cAAD,CAArB;AAEA;;AAEG;;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;EAOE,SAAA,aAAA,CAAY,MAAZ,EAAoC;IAAxB,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,EAAA;IAAwB;;IALnB,KAAA,OAAA,GAA8B,IAAI,GAAJ,EAA9B;IACT,KAAA,oBAAA,GAAsC,OAAO,CAAC,OAAR,EAAtC;IACA,KAAA,WAAA,GAAc,KAAd;IAIN,IAAM,YAAY,GAAG,KAAK,CAAC,EAAD,EAAK,cAAL,EAAqB,MAArB,CAA1B;IACA,KAAK,QAAL,GAAgB,YAAY,CAAC,QAAb,IAAyB,QAAQ,CAAC,KAAT,EAAzC;IACA,KAAK,QAAL,GAAgB,QAAQ,CAAC,OAAT,GAAmB,KAAnB,CAAyB,KAAK,QAA9B,CAAhB;IACA,KAAK,OAAL,GAAe,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,YAAlB,EAAgC;MAC7C,QAAQ,EAAE,KAAK;IAD8B,CAAhC,CAAf;EAGD;EAED;;;;AAIG;;;EACH,aAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAAuB,OAAvB,EAAyC,MAAzC,EAA6D;IAC3D,IAAM,GAAG,GAAM,IAAI,GAAA,GAAJ,IAAQ,OAAO,IAAI,EAAnB,CAAf;;IACA,IAAI,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAL,EAA4B;MAC1B,KAAK,OAAL,CAAa,GAAb,CACE,GADF,EAEE,IAAI,KAAJ,CAAU;QAAE,IAAI,EAAA,IAAN;QAAQ,OAAO,EAAA;MAAf,CAAV,EAA6B,MAAM,IAAI,KAAK,OAA5C,CAFF;IAID,CAP0D,CAS3D;;;IACA,OAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAP;EACD,CAXD;;EAaA,aAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IACE,IAAI,KAAK,WAAT,EAAsB;MACpB,OAAO,KAAK,oBAAZ;IACD;;IACD,KAAK,WAAL,GAAmB,IAAnB;IAEA,KAAK,oBAAL,GAA4B,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;MACtD,OAAO,CAAC,OAAR,GACG,IADH,CACQ,YAAA;QACJ,OAAO,OAAO,CAAC,GAAR,CACL,KAAK,CAAC,IAAN,CAAW,KAAI,CAAC,OAAhB,EAAyB,UAAC,EAAD,EAAW;cAAT,CAAC,GAAA,EAAA,CAAA,CAAA,C;cAAE,KAAK,GAAA,EAAA,CAAA,CAAA,C;UAAM,OAAA,KAAK,CAAC,QAAN,EAAA;QAAgB,CAAzD,CADK,CAAP;MAGD,CALH,EAMG,IANH,CAMQ,YAAA;QACJ,IAAI,KAAI,CAAC,OAAL,CAAa,QAAjB,EAA2B;UACzB,OAAO,KAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,QAAtB,EAAP;QACD;;QACD;MACD,CAXH,EAYG,IAZH,CAYQ,OAZR,EAaG,KAbH,CAaS,UAAA,CAAA,EAAC;QACN,MAAM,CAAC,CAAD,CAAN;MACD,CAfH;IAgBD,CAjB2B,CAA5B;IAkBA,OAAO,KAAK,oBAAZ;EACD,CAzBD;;EA0BF,OAAA,aAAA;AAAC,CA5DD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Resource } from '@opentelemetry/resources';\nimport { Meter } from '.';\nimport { DEFAULT_CONFIG } from './types';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar merge = require('lodash.merge');\n/**\n * This class represents a meter provider which platform libraries can extend\n */\nvar MeterProvider = /** @class */ (function () {\n    function MeterProvider(config) {\n        if (config === void 0) { config = {}; }\n        this._meters = new Map();\n        this._shuttingDownPromise = Promise.resolve();\n        this._isShutdown = false;\n        var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n        this.resource = mergedConfig.resource || Resource.empty();\n        this.resource = Resource.default().merge(this.resource);\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n    }\n    /**\n     * Returns a Meter, creating one if one with the given name and version is not already created\n     *\n     * @returns Meter A Meter with the given name and version\n     */\n    MeterProvider.prototype.getMeter = function (name, version, config) {\n        var key = name + \"@\" + (version || '');\n        if (!this._meters.has(key)) {\n            this._meters.set(key, new Meter({ name: name, version: version }, config || this._config));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._meters.get(key);\n    };\n    MeterProvider.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return Promise.all(Array.from(_this._meters, function (_a) {\n                    var _ = _a[0], meter = _a[1];\n                    return meter.shutdown();\n                }));\n            })\n                .then(function () {\n                if (_this._config.exporter) {\n                    return _this._config.exporter.shutdown();\n                }\n                return;\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    return MeterProvider;\n}());\nexport { MeterProvider };\n//# sourceMappingURL=MeterProvider.js.map"]},"metadata":{},"sourceType":"module"}