{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext } from '../trace/spancontext-utils';\nimport { deleteSpan, getSpan, getSpanContext, setSpan, setSpanContext } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\n\nvar TraceAPI =\n/** @class */\nfunction () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function TraceAPI() {\n    this._proxyTracerProvider = new ProxyTracerProvider();\n    this.wrapSpanContext = wrapSpanContext;\n    this.isSpanContextValid = isSpanContextValid;\n    this.deleteSpan = deleteSpan;\n    this.getSpan = getSpan;\n    this.getSpanContext = getSpanContext;\n    this.setSpan = setSpan;\n    this.setSpanContext = setSpanContext;\n  }\n  /** Get the singleton instance of the Trace API */\n\n\n  TraceAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  };\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n\n\n  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n    var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n\n    return success;\n  };\n  /**\n   * Returns the global tracer provider.\n   */\n\n\n  TraceAPI.prototype.getTracerProvider = function () {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  };\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n\n\n  TraceAPI.prototype.getTracer = function (name, version) {\n    return this.getTracerProvider().getTracer(name, version);\n  };\n  /** Remove the global tracer provider */\n\n\n  TraceAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  };\n\n  return TraceAPI;\n}();\n\nexport { TraceAPI };","map":{"version":3,"sources":["../../../src/api/trace.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SACE,SADF,EAEE,cAFF,EAGE,gBAHF,QAIO,0BAJP;AAKA,SAAS,mBAAT,QAAoC,8BAApC;AACA,SACE,kBADF,EAEE,eAFF,QAGO,4BAHP;AAMA,SACE,UADF,EAEE,OAFF,EAGE,cAHF,EAIE,OAJF,EAKE,cALF,QAMO,wBANP;AAOA,SAAS,OAAT,QAAwB,QAAxB;AAEA,IAAM,QAAQ,GAAG,OAAjB;AAEA;;AAEG;;AACH,IAAA,QAAA;AAAA;AAAA,YAAA;EAKE;EACA,SAAA,QAAA,GAAA;IAHQ,KAAA,oBAAA,GAAuB,IAAI,mBAAJ,EAAvB;IAmDD,KAAA,eAAA,GAAkB,eAAlB;IAEA,KAAA,kBAAA,GAAqB,kBAArB;IAEA,KAAA,UAAA,GAAa,UAAb;IAEA,KAAA,OAAA,GAAU,OAAV;IAEA,KAAA,cAAA,GAAiB,cAAjB;IAEA,KAAA,OAAA,GAAU,OAAV;IAEA,KAAA,cAAA,GAAiB,cAAjB;EA5DiB;EAExB;;;EACc,QAAA,CAAA,WAAA,GAAd,YAAA;IACE,IAAI,CAAC,KAAK,SAAV,EAAqB;MACnB,KAAK,SAAL,GAAiB,IAAI,QAAJ,EAAjB;IACD;;IAED,OAAO,KAAK,SAAZ;EACD,CANa;EAQd;;;;AAIG;;;EACI,QAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,QAA/B,EAAuD;IACrD,IAAM,OAAO,GAAG,cAAc,CAC5B,QAD4B,EAE5B,KAAK,oBAFuB,EAG5B,OAAO,CAAC,QAAR,EAH4B,CAA9B;;IAKA,IAAI,OAAJ,EAAa;MACX,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,QAAtC;IACD;;IACD,OAAO,OAAP;EACD,CAVM;EAYP;;AAEG;;;EACI,QAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;IACE,OAAO,SAAS,CAAC,QAAD,CAAT,IAAuB,KAAK,oBAAnC;EACD,CAFM;EAIP;;AAEG;;;EACI,QAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,IAAjB,EAA+B,OAA/B,EAA+C;IAC7C,OAAO,KAAK,iBAAL,GAAyB,SAAzB,CAAmC,IAAnC,EAAyC,OAAzC,CAAP;EACD,CAFM;EAIP;;;EACO,QAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;IACE,gBAAgB,CAAC,QAAD,EAAW,OAAO,CAAC,QAAR,EAAX,CAAhB;IACA,KAAK,oBAAL,GAA4B,IAAI,mBAAJ,EAA5B;EACD,CAHM;;EAkBT,OAAA,QAAA;AAAC,CAnED,EAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}