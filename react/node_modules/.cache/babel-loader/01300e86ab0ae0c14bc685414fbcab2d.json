{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\n\nvar CompositePropagator =\n/** @class */\nfunction () {\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  function CompositePropagator(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _a;\n\n    this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n    this._fields = Array.from(new Set(this._propagators // older propagators may not have fields function, null check to be sure\n    .map(function (p) {\n      return typeof p.fields === 'function' ? p.fields() : [];\n    }).reduce(function (x, y) {\n      return x.concat(y);\n    }, [])));\n  }\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n\n\n  CompositePropagator.prototype.inject = function (context, carrier, setter) {\n    for (var _i = 0, _a = this._propagators; _i < _a.length; _i++) {\n      var propagator = _a[_i];\n\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n      }\n    }\n  };\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n\n\n  CompositePropagator.prototype.extract = function (context, carrier, getter) {\n    return this._propagators.reduce(function (ctx, propagator) {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n      }\n\n      return ctx;\n    }, context);\n  };\n\n  CompositePropagator.prototype.fields = function () {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  };\n\n  return CompositePropagator;\n}();\n\nexport { CompositePropagator };","map":{"version":3,"sources":["../../../src/propagation/composite.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAIE,IAJF,QAMO,oBANP;AAkBA;;AACA,IAAA,mBAAA;AAAA;AAAA,YAAA;EAIE;;;;AAIG;EACH,SAAA,mBAAA,CAAY,MAAZ,EAAkD;IAAtC,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,EAAA;IAAsC;;;;IAChD,KAAK,YAAL,GAAoB,CAAA,EAAA,GAAA,MAAM,CAAC,WAAP,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,EAAlB,GAAsB,EAA1C;IAEA,KAAK,OAAL,GAAe,KAAK,CAAC,IAAN,CACb,IAAI,GAAJ,CACE,KAAK,YAAL,CACE;IADF,CAEG,GAFH,CAEO,UAAA,CAAA,EAAC;MAAI,OAAC,OAAO,CAAC,CAAC,MAAT,KAAoB,UAApB,GAAiC,CAAC,CAAC,MAAF,EAAjC,GAAD,EAAA;IAAkD,CAF9D,EAGG,MAHH,CAGU,UAAC,CAAD,EAAI,CAAJ,EAAK;MAAK,OAAA,CAAC,CAAC,MAAF,CAAA,CAAA,CAAA;IAAW,CAH/B,EAGiC,EAHjC,CADF,CADa,CAAf;EAQD;EAED;;;;;;;;AAQG;;;EACH,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,OAAP,EAAyB,OAAzB,EAA2C,MAA3C,EAAgE;IAC9D,KAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,YAA9B,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAA4C;MAAvC,IAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;;MACH,IAAI;QACF,UAAU,CAAC,MAAX,CAAkB,OAAlB,EAA2B,OAA3B,EAAoC,MAApC;MACD,CAFD,CAEE,OAAO,GAAP,EAAY;QACZ,IAAI,CAAC,IAAL,CACE,2BAAyB,UAAU,CAAC,WAAX,CAAuB,IAAhD,GAAoD,SAApD,GAA8D,GAAG,CAAC,OADpE;MAGD;IACF;EACF,CAVD;EAYA;;;;;;;;AAQG;;;EACH,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,OAAR,EAA0B,OAA1B,EAA4C,MAA5C,EAAiE;IAC/D,OAAO,KAAK,YAAL,CAAkB,MAAlB,CAAyB,UAAC,GAAD,EAAM,UAAN,EAAgB;MAC9C,IAAI;QACF,OAAO,UAAU,CAAC,OAAX,CAAmB,GAAnB,EAAwB,OAAxB,EAAiC,MAAjC,CAAP;MACD,CAFD,CAEE,OAAO,GAAP,EAAY;QACZ,IAAI,CAAC,IAAL,CACE,2BAAyB,UAAU,CAAC,WAAX,CAAuB,IAAhD,GAAoD,SAApD,GAA8D,GAAG,CAAC,OADpE;MAGD;;MACD,OAAO,GAAP;IACD,CATM,EASJ,OATI,CAAP;EAUD,CAXD;;EAaA,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;IACE;IACA,OAAO,KAAK,OAAL,CAAa,KAAb,EAAP;EACD,CAHD;;EAIF,OAAA,mBAAA;AAAC,CArED,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        for (var _i = 0, _a = this._propagators; _i < _a.length; _i++) {\n            var propagator = _a[_i];\n            try {\n                propagator.inject(context, carrier, setter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\nexport { CompositePropagator };\n//# sourceMappingURL=composite.js.map"]},"metadata":{},"sourceType":"module"}