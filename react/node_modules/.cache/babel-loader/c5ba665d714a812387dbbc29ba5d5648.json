{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\n\nvar ProxyTracer =\n/** @class */\nfunction () {\n  function ProxyTracer(_provider, name, version, options) {\n    this._provider = _provider;\n    this.name = name;\n    this.version = version;\n    this.options = options;\n  }\n\n  ProxyTracer.prototype.startSpan = function (name, options, context) {\n    return this._getTracer().startSpan(name, options, context);\n  };\n\n  ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n    var tracer = this._getTracer();\n\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  };\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n\n\n  ProxyTracer.prototype._getTracer = function () {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  };\n\n  return ProxyTracer;\n}();\n\nexport { ProxyTracer };","map":{"version":3,"sources":["../../../src/trace/ProxyTracer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAS,UAAT,QAA2B,cAA3B;AAMA,IAAM,WAAW,GAAG,IAAI,UAAJ,EAApB;AAEA;;AAEG;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;EAIE,SAAA,WAAA,CACU,SADV,EAEkB,IAFlB,EAGkB,OAHlB,EAIkB,OAJlB,EAIyC;IAH/B,KAAA,SAAA,GAAA,SAAA;IACQ,KAAA,IAAA,GAAA,IAAA;IACA,KAAA,OAAA,GAAA,OAAA;IACA,KAAA,OAAA,GAAA,OAAA;EACd;;EAEJ,WAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAA+C,OAA/C,EAAgE;IAC9D,OAAO,KAAK,UAAL,GAAkB,SAAlB,CAA4B,IAA5B,EAAkC,OAAlC,EAA2C,OAA3C,CAAP;EACD,CAFD;;EAIA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UACE,KADF,EAEE,QAFF,EAGE,QAHF,EAIE,GAJF,EAIS;IAEP,IAAM,MAAM,GAAG,KAAK,UAAL,EAAf;;IACA,OAAO,OAAO,CAAC,KAAR,CAAc,MAAM,CAAC,eAArB,EAAsC,MAAtC,EAA8C,SAA9C,CAAP;EACD,CARD;EAUA;;;AAGG;;;EACK,WAAA,CAAA,SAAA,CAAA,UAAA,GAAR,YAAA;IACE,IAAI,KAAK,SAAT,EAAoB;MAClB,OAAO,KAAK,SAAZ;IACD;;IAED,IAAM,MAAM,GAAG,KAAK,SAAL,CAAe,iBAAf,CAAiC,KAAK,IAAtC,EAA4C,KAAK,OAAjD,EAA0D,KAAK,OAA/D,CAAf;;IAEA,IAAI,CAAC,MAAL,EAAa;MACX,OAAO,WAAP;IACD;;IAED,KAAK,SAAL,GAAiB,MAAjB;IACA,OAAO,KAAK,SAAZ;EACD,CAbO;;EAcV,OAAA,WAAA;AAAC,CA3CD,EAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(name: string, version?: string, options?: TracerOptions): Tracer | undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}