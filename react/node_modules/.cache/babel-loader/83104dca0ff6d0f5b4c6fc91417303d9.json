{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, TraceFlags } from '@opentelemetry/api';\nimport { ExportResultCode, globalErrorHandler, suppressTracing } from '@opentelemetry/core';\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\n\nvar SimpleSpanProcessor =\n/** @class */\nfunction () {\n  function SimpleSpanProcessor(_exporter) {\n    this._exporter = _exporter;\n    this._isShutdown = false;\n    this._shuttingDownPromise = Promise.resolve();\n  }\n\n  SimpleSpanProcessor.prototype.forceFlush = function () {\n    // do nothing as all spans are being exported without waiting\n    return Promise.resolve();\n  }; // does nothing.\n\n\n  SimpleSpanProcessor.prototype.onStart = function (_span) {};\n\n  SimpleSpanProcessor.prototype.onEnd = function (span) {\n    var _this = this;\n\n    if (this._isShutdown) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    } // prevent downstream exporter calls from generating spans\n\n\n    context.with(suppressTracing(context.active()), function () {\n      _this._exporter.export([span], function (result) {\n        var _a;\n\n        if (result.code !== ExportResultCode.SUCCESS) {\n          globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n        }\n      });\n    });\n  };\n\n  SimpleSpanProcessor.prototype.shutdown = function () {\n    var _this = this;\n\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n\n    this._isShutdown = true;\n    this._shuttingDownPromise = new Promise(function (resolve, reject) {\n      Promise.resolve().then(function () {\n        return _this._exporter.shutdown();\n      }).then(resolve).catch(function (e) {\n        reject(e);\n      });\n    });\n    return this._shuttingDownPromise;\n  };\n\n  return SimpleSpanProcessor;\n}();\n\nexport { SimpleSpanProcessor };","map":{"version":3,"sources":["../../../src/export/SimpleSpanProcessor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,OAAT,EAAkB,UAAlB,QAAoC,oBAApC;AACA,SACE,gBADF,EAEE,kBAFF,EAGE,eAHF,QAIO,qBAJP;AAUA;;;;;AAKG;;AACH,IAAA,mBAAA;AAAA;AAAA,YAAA;EACE,SAAA,mBAAA,CAA6B,SAA7B,EAAoD;IAAvB,KAAA,SAAA,GAAA,SAAA;IAErB,KAAA,WAAA,GAAc,KAAd;IACA,KAAA,oBAAA,GAAsC,OAAO,CAAC,OAAR,EAAtC;EAHgD;;EAKxD,mBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;IACE;IACA,OAAO,OAAO,CAAC,OAAR,EAAP;EACD,CAHD,CANF,CAWE;;;EACA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,KAAR,EAAmB,CAAU,CAA7B;;EAEA,mBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAAwB;IAAxB,IAAA,KAAA,GAAA,IAAA;;IACE,IAAI,KAAK,WAAT,EAAsB;MACpB;IACD;;IAED,IAAI,CAAC,IAAI,CAAC,WAAL,GAAmB,UAAnB,GAAgC,UAAU,CAAC,OAA5C,MAAyD,CAA7D,EAAgE;MAC9D;IACD,CAPqB,CAStB;;;IACA,OAAO,CAAC,IAAR,CAAa,eAAe,CAAC,OAAO,CAAC,MAAR,EAAD,CAA5B,EAAgD,YAAA;MAC9C,KAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,CAAC,IAAD,CAAtB,EAA8B,UAAA,MAAA,EAAM;;;QAClC,IAAI,MAAM,CAAC,IAAP,KAAgB,gBAAgB,CAAC,OAArC,EAA8C;UAC5C,kBAAkB,CAChB,CAAA,EAAA,GAAA,MAAM,CAAC,KAAP,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,EAAZ,GACE,IAAI,KAAJ,CACE,qDAAmD,MAAnD,GAAyD,GAD3D,CAFc,CAAlB;QAMD;MACF,CATD;IAUD,CAXD;EAYD,CAtBD;;EAwBA,mBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IACE,IAAI,KAAK,WAAT,EAAsB;MACpB,OAAO,KAAK,oBAAZ;IACD;;IACD,KAAK,WAAL,GAAmB,IAAnB;IACA,KAAK,oBAAL,GAA4B,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;MACtD,OAAO,CAAC,OAAR,GACG,IADH,CACQ,YAAA;QACJ,OAAO,KAAI,CAAC,SAAL,CAAe,QAAf,EAAP;MACD,CAHH,EAIG,IAJH,CAIQ,OAJR,EAKG,KALH,CAKS,UAAA,CAAA,EAAC;QACN,MAAM,CAAC,CAAD,CAAN;MACD,CAPH;IAQD,CAT2B,CAA5B;IAUA,OAAO,KAAK,oBAAZ;EACD,CAhBD;;EAiBF,OAAA,mBAAA;AAAC,CAvDD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, TraceFlags } from '@opentelemetry/api';\nimport { ExportResultCode, globalErrorHandler, suppressTracing, } from '@opentelemetry/core';\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nvar SimpleSpanProcessor = /** @class */ (function () {\n    function SimpleSpanProcessor(_exporter) {\n        this._exporter = _exporter;\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n    }\n    SimpleSpanProcessor.prototype.forceFlush = function () {\n        // do nothing as all spans are being exported without waiting\n        return Promise.resolve();\n    };\n    // does nothing.\n    SimpleSpanProcessor.prototype.onStart = function (_span) { };\n    SimpleSpanProcessor.prototype.onEnd = function (span) {\n        var _this = this;\n        if (this._isShutdown) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        // prevent downstream exporter calls from generating spans\n        context.with(suppressTracing(context.active()), function () {\n            _this._exporter.export([span], function (result) {\n                var _a;\n                if (result.code !== ExportResultCode.SUCCESS) {\n                    globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n                }\n            });\n        });\n    };\n    SimpleSpanProcessor.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this._exporter.shutdown();\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    return SimpleSpanProcessor;\n}());\nexport { SimpleSpanProcessor };\n//# sourceMappingURL=SimpleSpanProcessor.js.map"]},"metadata":{},"sourceType":"module"}