{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\n\nvar MultiSpanProcessor =\n/** @class */\nfunction () {\n  function MultiSpanProcessor(_spanProcessors) {\n    this._spanProcessors = _spanProcessors;\n  }\n\n  MultiSpanProcessor.prototype.forceFlush = function () {\n    var promises = [];\n\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      promises.push(spanProcessor.forceFlush());\n    }\n\n    return new Promise(function (resolve) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(function (error) {\n        globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n        resolve();\n      });\n    });\n  };\n\n  MultiSpanProcessor.prototype.onStart = function (span, context) {\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      spanProcessor.onStart(span, context);\n    }\n  };\n\n  MultiSpanProcessor.prototype.onEnd = function (span) {\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      spanProcessor.onEnd(span);\n    }\n  };\n\n  MultiSpanProcessor.prototype.shutdown = function () {\n    var promises = [];\n\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      promises.push(spanProcessor.shutdown());\n    }\n\n    return new Promise(function (resolve, reject) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }, reject);\n    });\n  };\n\n  return MultiSpanProcessor;\n}();\n\nexport { MultiSpanProcessor };","map":{"version":3,"sources":["../../src/MultiSpanProcessor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAS,kBAAT,QAAmC,qBAAnC;AAKA;;;AAGG;;AACH,IAAA,kBAAA;AAAA;AAAA,YAAA;EACE,SAAA,kBAAA,CAA6B,eAA7B,EAA6D;IAAhC,KAAA,eAAA,GAAA,eAAA;EAAoC;;EAEjE,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;IACE,IAAM,QAAQ,GAAoB,EAAlC;;IAEA,KAA4B,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,eAAjC,EAA4B,EAAA,GAAA,EAAA,CAAA,MAA5B,EAA4B,EAAA,EAA5B,EAAkD;MAA7C,IAAM,aAAa,GAAA,EAAA,CAAA,EAAA,CAAnB;MACH,QAAQ,CAAC,IAAT,CAAc,aAAa,CAAC,UAAd,EAAd;IACD;;IACD,OAAO,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAO;MACxB,OAAO,CAAC,GAAR,CAAY,QAAZ,EACG,IADH,CACQ,YAAA;QACJ,OAAO;MACR,CAHH,EAIG,KAJH,CAIS,UAAA,KAAA,EAAK;QACV,kBAAkB,CAChB,KAAK,IAAI,IAAI,KAAJ,CAAU,uCAAV,CADO,CAAlB;QAGA,OAAO;MACR,CATH;IAUD,CAXM,CAAP;EAYD,CAlBD;;EAoBA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAoB,OAApB,EAAoC;IAClC,KAA4B,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,eAAjC,EAA4B,EAAA,GAAA,EAAA,CAAA,MAA5B,EAA4B,EAAA,EAA5B,EAAkD;MAA7C,IAAM,aAAa,GAAA,EAAA,CAAA,EAAA,CAAnB;MACH,aAAa,CAAC,OAAd,CAAsB,IAAtB,EAA4B,OAA5B;IACD;EACF,CAJD;;EAMA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAAwB;IACtB,KAA4B,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,eAAjC,EAA4B,EAAA,GAAA,EAAA,CAAA,MAA5B,EAA4B,EAAA,EAA5B,EAAkD;MAA7C,IAAM,aAAa,GAAA,EAAA,CAAA,EAAA,CAAnB;MACH,aAAa,CAAC,KAAd,CAAoB,IAApB;IACD;EACF,CAJD;;EAMA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE,IAAM,QAAQ,GAAoB,EAAlC;;IAEA,KAA4B,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,eAAjC,EAA4B,EAAA,GAAA,EAAA,CAAA,MAA5B,EAA4B,EAAA,EAA5B,EAAkD;MAA7C,IAAM,aAAa,GAAA,EAAA,CAAA,EAAA,CAAnB;MACH,QAAQ,CAAC,IAAT,CAAc,aAAa,CAAC,QAAd,EAAd;IACD;;IACD,OAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;MACjC,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,IAAtB,CAA2B,YAAA;QACzB,OAAO;MACR,CAFD,EAEG,MAFH;IAGD,CAJM,CAAP;EAKD,CAXD;;EAYF,OAAA,kBAAA;AAAC,CA/CD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var promises = [];\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            promises.push(spanProcessor.forceFlush());\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            spanProcessor.onStart(span, context);\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            spanProcessor.onEnd(span);\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var promises = [];\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            promises.push(spanProcessor.shutdown());\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\nexport { MultiSpanProcessor };\n//# sourceMappingURL=MultiSpanProcessor.js.map"]},"metadata":{},"sourceType":"module"}