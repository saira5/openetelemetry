{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from './tracestate-validators';\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\n\nvar TraceStateImpl =\n/** @class */\nfunction () {\n  function TraceStateImpl(rawTraceState) {\n    this._internalState = new Map();\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  TraceStateImpl.prototype.set = function (key, value) {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    var traceState = this._clone();\n\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n\n    traceState._internalState.set(key, value);\n\n    return traceState;\n  };\n\n  TraceStateImpl.prototype.unset = function (key) {\n    var traceState = this._clone();\n\n    traceState._internalState.delete(key);\n\n    return traceState;\n  };\n\n  TraceStateImpl.prototype.get = function (key) {\n    return this._internalState.get(key);\n  };\n\n  TraceStateImpl.prototype.serialize = function () {\n    var _this = this;\n\n    return this._keys().reduce(function (agg, key) {\n      agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n      return agg;\n    }, []).join(LIST_MEMBERS_SEPARATOR);\n  };\n\n  TraceStateImpl.prototype._parse = function (rawTraceState) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n    .reduce(function (agg, part) {\n      var listMember = part.trim(); // Optional Whitespace (OWS) handling\n\n      var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n\n      if (i !== -1) {\n        var key = listMember.slice(0, i);\n        var value = listMember.slice(i + 1, part.length);\n\n        if (validateKey(key) && validateValue(value)) {\n          agg.set(key, value);\n        } else {// TODO: Consider to add warning log\n        }\n      }\n\n      return agg;\n    }, new Map()); // Because of the reverse() requirement, trunc must be done after map is created\n\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(Array.from(this._internalState.entries()).reverse() // Use reverse same as original tracestate parse chain\n      .slice(0, MAX_TRACE_STATE_ITEMS));\n    }\n  };\n\n  TraceStateImpl.prototype._keys = function () {\n    return Array.from(this._internalState.keys()).reverse();\n  };\n\n  TraceStateImpl.prototype._clone = function () {\n    var traceState = new TraceStateImpl();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  };\n\n  return TraceStateImpl;\n}();\n\nexport { TraceStateImpl };","map":{"version":3,"sources":["../../../../src/trace/internal/tracestate-impl.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { validateKey, validateValue } from './tracestate-validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceStateImpl implements TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceStateImpl {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceStateImpl {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceStateImpl {\n    const traceState = new TraceStateImpl();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}