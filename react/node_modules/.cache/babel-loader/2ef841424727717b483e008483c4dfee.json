{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This is implementation of {@link MetricExporter} that prints metrics data to\n * the console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\n\nvar ConsoleMetricExporter =\n/** @class */\nfunction () {\n  function ConsoleMetricExporter() {}\n\n  ConsoleMetricExporter.prototype.export = function (metrics, resultCallback) {\n    for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {\n      var metric = metrics_1[_i];\n      console.log(metric.descriptor);\n      console.log(metric.labels);\n      var point = metric.aggregator.toPoint();\n\n      if (typeof point.value === 'number') {\n        console.log('value: ' + point.value);\n      } else if (typeof point.value.buckets === 'object') {\n        var histogram = point.value;\n        console.log(\"count: \" + histogram.count + \", sum: \" + histogram.sum + \", buckets: \" + histogram.buckets);\n      } else {\n        console.log(point.value);\n      }\n    }\n\n    return resultCallback({\n      code: ExportResultCode.SUCCESS\n    });\n  };\n\n  ConsoleMetricExporter.prototype.shutdown = function () {\n    // By default does nothing\n    return Promise.resolve();\n  };\n\n  return ConsoleMetricExporter;\n}();\n\nexport { ConsoleMetricExporter };","map":{"version":3,"sources":["../../../src/export/ConsoleMetricExporter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAuB,gBAAvB,QAA+C,qBAA/C;AAEA;;;AAGG;;AAEH;;AACA,IAAA,qBAAA;AAAA;AAAA,YAAA;EAAA,SAAA,qBAAA,GAAA,CA2BC;;EA1BC,qBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UACE,OADF,EAEE,cAFF,EAEgD;IAE9C,KAAqB,IAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,OAArB,EAAqB,EAAA,GAAA,SAAA,CAAA,MAArB,EAAqB,EAAA,EAArB,EAA8B;MAAzB,IAAM,MAAM,GAAA,SAAA,CAAA,EAAA,CAAZ;MACH,OAAO,CAAC,GAAR,CAAY,MAAM,CAAC,UAAnB;MACA,OAAO,CAAC,GAAR,CAAY,MAAM,CAAC,MAAnB;MACA,IAAM,KAAK,GAAG,MAAM,CAAC,UAAP,CAAkB,OAAlB,EAAd;;MACA,IAAI,OAAO,KAAK,CAAC,KAAb,KAAuB,QAA3B,EAAqC;QACnC,OAAO,CAAC,GAAR,CAAY,YAAY,KAAK,CAAC,KAA9B;MACD,CAFD,MAEO,IAAI,OAAQ,KAAK,CAAC,KAAN,CAA0B,OAAlC,KAA8C,QAAlD,EAA4D;QACjE,IAAM,SAAS,GAAG,KAAK,CAAC,KAAxB;QACA,OAAO,CAAC,GAAR,CACE,YAAU,SAAS,CAAC,KAApB,GAAyB,SAAzB,GAAmC,SAAS,CAAC,GAA7C,GAAgD,aAAhD,GAA8D,SAAS,CAAC,OAD1E;MAGD,CALM,MAKA;QACL,OAAO,CAAC,GAAR,CAAY,KAAK,CAAC,KAAlB;MACD;IACF;;IACD,OAAO,cAAc,CAAC;MAAE,IAAI,EAAE,gBAAgB,CAAC;IAAzB,CAAD,CAArB;EACD,CApBD;;EAsBA,qBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE;IACA,OAAO,OAAO,CAAC,OAAR,EAAP;EACD,CAHD;;EAIF,OAAA,qBAAA;AAAC,CA3BD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This is implementation of {@link MetricExporter} that prints metrics data to\n * the console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleMetricExporter = /** @class */ (function () {\n    function ConsoleMetricExporter() {\n    }\n    ConsoleMetricExporter.prototype.export = function (metrics, resultCallback) {\n        for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {\n            var metric = metrics_1[_i];\n            console.log(metric.descriptor);\n            console.log(metric.labels);\n            var point = metric.aggregator.toPoint();\n            if (typeof point.value === 'number') {\n                console.log('value: ' + point.value);\n            }\n            else if (typeof point.value.buckets === 'object') {\n                var histogram = point.value;\n                console.log(\"count: \" + histogram.count + \", sum: \" + histogram.sum + \", buckets: \" + histogram.buckets);\n            }\n            else {\n                console.log(point.value);\n            }\n        }\n        return resultCallback({ code: ExportResultCode.SUCCESS });\n    };\n    ConsoleMetricExporter.prototype.shutdown = function () {\n        // By default does nothing\n        return Promise.resolve();\n    };\n    return ConsoleMetricExporter;\n}());\nexport { ConsoleMetricExporter };\n//# sourceMappingURL=ConsoleMetricExporter.js.map"]},"metadata":{},"sourceType":"module"}