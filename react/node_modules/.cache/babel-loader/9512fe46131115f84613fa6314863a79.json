{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { BatchObserverResult } from './BatchObserverResult';\n\nvar NOOP_CALLBACK = function NOOP_CALLBACK() {};\n\nvar MAX_TIMEOUT_UPDATE_MS = 500;\n/** This is a SDK implementation of Batch Observer. */\n\nvar BatchObserver =\n/** @class */\nfunction () {\n  function BatchObserver(options, callback) {\n    var _a;\n\n    this._maxTimeoutUpdateMS = (_a = options.maxTimeoutUpdateMS) !== null && _a !== void 0 ? _a : MAX_TIMEOUT_UPDATE_MS;\n    this._callback = callback || NOOP_CALLBACK;\n  }\n\n  BatchObserver.prototype.collect = function () {\n    var _this = this;\n\n    diag.debug('getMetricRecord - start');\n    return new Promise(function (resolve) {\n      var observerResult = new BatchObserverResult(); // cancels after MAX_TIMEOUT_MS - no more waiting for results\n\n      var timer = setTimeout(function () {\n        observerResult.cancelled = true; // remove callback to prevent user from updating the values later if\n        // for any reason the observerBatchResult will be referenced\n\n        observerResult.onObserveCalled();\n        resolve();\n        diag.debug('getMetricRecord - timeout');\n      }, _this._maxTimeoutUpdateMS); // sets callback for each \"observe\" method\n\n      observerResult.onObserveCalled(function () {\n        clearTimeout(timer);\n        resolve();\n        diag.debug('getMetricRecord - end');\n      }); // calls the BatchObserverResult callback\n\n      _this._callback(observerResult);\n    });\n  };\n\n  return BatchObserver;\n}();\n\nexport { BatchObserver };","map":{"version":3,"sources":["../../src/BatchObserver.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAS,IAAT,QAAqB,oBAArB;AACA,SAAS,mBAAT,QAAoC,uBAApC;;AAEA,IAAM,aAAa,GAAG,SAAhB,aAAgB,GAAA,CAAQ,CAA9B;;AACA,IAAM,qBAAqB,GAAG,GAA9B;AAEA;;AACA,IAAA,aAAA;AAAA;AAAA,YAAA;EAIE,SAAA,aAAA,CACE,OADF,EAEE,QAFF,EAE8D;;;IAE5D,KAAK,mBAAL,GACE,CAAA,EAAA,GAAA,OAAO,CAAC,kBAAR,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,EAA1B,GAA8B,qBADhC;IAEA,KAAK,SAAL,GAAiB,QAAQ,IAAI,aAA7B;EACD;;EAED,aAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IACE,IAAI,CAAC,KAAL,CAAW,yBAAX;IACA,OAAO,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAO;MACxB,IAAM,cAAc,GAAG,IAAI,mBAAJ,EAAvB,CADwB,CAGxB;;MACA,IAAM,KAAK,GAAG,UAAU,CAAC,YAAA;QACvB,cAAc,CAAC,SAAf,GAA2B,IAA3B,CADuB,CAEvB;QACA;;QACA,cAAc,CAAC,eAAf;QACA,OAAO;QACP,IAAI,CAAC,KAAL,CAAW,2BAAX;MACD,CAPuB,EAOrB,KAAI,CAAC,mBAPgB,CAAxB,CAJwB,CAaxB;;MACA,cAAc,CAAC,eAAf,CAA+B,YAAA;QAC7B,YAAY,CAAC,KAAD,CAAZ;QACA,OAAO;QACP,IAAI,CAAC,KAAL,CAAW,uBAAX;MACD,CAJD,EAdwB,CAoBxB;;MACA,KAAI,CAAC,SAAL,CAAe,cAAf;IACD,CAtBM,CAAP;EAuBD,CAzBD;;EA0BF,OAAA,aAAA;AAAC,CAvCD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { BatchObserverResult } from './BatchObserverResult';\nvar NOOP_CALLBACK = function () { };\nvar MAX_TIMEOUT_UPDATE_MS = 500;\n/** This is a SDK implementation of Batch Observer. */\nvar BatchObserver = /** @class */ (function () {\n    function BatchObserver(options, callback) {\n        var _a;\n        this._maxTimeoutUpdateMS =\n            (_a = options.maxTimeoutUpdateMS) !== null && _a !== void 0 ? _a : MAX_TIMEOUT_UPDATE_MS;\n        this._callback = callback || NOOP_CALLBACK;\n    }\n    BatchObserver.prototype.collect = function () {\n        var _this = this;\n        diag.debug('getMetricRecord - start');\n        return new Promise(function (resolve) {\n            var observerResult = new BatchObserverResult();\n            // cancels after MAX_TIMEOUT_MS - no more waiting for results\n            var timer = setTimeout(function () {\n                observerResult.cancelled = true;\n                // remove callback to prevent user from updating the values later if\n                // for any reason the observerBatchResult will be referenced\n                observerResult.onObserveCalled();\n                resolve();\n                diag.debug('getMetricRecord - timeout');\n            }, _this._maxTimeoutUpdateMS);\n            // sets callback for each \"observe\" method\n            observerResult.onObserveCalled(function () {\n                clearTimeout(timer);\n                resolve();\n                diag.debug('getMetricRecord - end');\n            });\n            // calls the BatchObserverResult callback\n            _this._callback(observerResult);\n        });\n    };\n    return BatchObserver;\n}());\nexport { BatchObserver };\n//# sourceMappingURL=BatchObserver.js.map"]},"metadata":{},"sourceType":"module"}