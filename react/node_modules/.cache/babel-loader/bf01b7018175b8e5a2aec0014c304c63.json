{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH } from './constants';\nexport var serializeKeyPairs = function serializeKeyPairs(keyPairs) {\n  return keyPairs.reduce(function (hValue, current) {\n    var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n};\nexport var getKeyPairs = function getKeyPairs(baggage) {\n  return baggage.getAllEntries().map(function (_a) {\n    var key = _a[0],\n        value = _a[1];\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n  });\n};\nexport var parsePairKeyValue = function parsePairKeyValue(entry) {\n  var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  var keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  var keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (keyPair.length !== 2) return;\n  var key = decodeURIComponent(keyPair[0].trim());\n  var value = decodeURIComponent(keyPair[1].trim());\n  var metadata;\n\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n  }\n\n  return {\n    key: key,\n    value: value,\n    metadata: metadata\n  };\n};\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\n\nexport var parseKeyPairsIntoRecord = function parseKeyPairsIntoRecord(value) {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value.split(BAGGAGE_ITEMS_SEPARATOR).map(function (entry) {\n    return parsePairKeyValue(entry);\n  }).filter(function (keyPair) {\n    return keyPair !== undefined && keyPair.value.length > 0;\n  }).reduce(function (headers, keyPair) {\n    headers[keyPair.key] = keyPair.value;\n    return headers;\n  }, {});\n};","map":{"version":3,"sources":["../../../src/baggage/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AACH,SAAkB,8BAAlB,QAAwD,oBAAxD;AACA,SACE,uBADF,EAEE,4BAFF,EAGE,0BAHF,EAIE,wBAJF,QAKO,aALP;AAOA,OAAO,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,QAAD,EAAmB;EAClD,OAAO,QAAQ,CAAC,MAAT,CAAgB,UAAC,MAAD,EAAiB,OAAjB,EAAgC;IACrD,IAAM,KAAK,GAAG,KAAG,MAAH,IACZ,MAAM,KAAK,EAAX,GAAgB,uBAAhB,GAA0C,EAD9B,IAEX,OAFH;IAGA,OAAO,KAAK,CAAC,MAAN,GAAe,wBAAf,GAA0C,MAA1C,GAAmD,KAA1D;EACD,CALM,EAKJ,EALI,CAAP;AAMD,CAPM;AASP,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CAAC,OAAD,EAAiB;EAC1C,OAAO,OAAO,CACX,aADI,GAEJ,GAFI,CAGH,UAAC,EAAD,EAAa;QAAX,GAAG,GAAA,EAAA,CAAA,CAAA,C;QAAE,KAAK,GAAA,EAAA,CAAA,CAAA,C;IACV,OAAG,kBAAkB,CAAC,GAAD,CAAlB,GAAuB,GAAvB,GAA2B,kBAAkB,CAAC,KAAK,CAAC,KAAP,CAAhD;EAA+D,CAJ9D,CAAP;AAMD,CAPM;AASP,OAAO,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,KAAD,EAAc;EAC7C,IAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,4BAAZ,CAAnB;EACA,IAAI,UAAU,CAAC,MAAX,IAAqB,CAAzB,EAA4B;EAC5B,IAAM,WAAW,GAAG,UAAU,CAAC,KAAX,EAApB;EACA,IAAI,CAAC,WAAL,EAAkB;EAClB,IAAM,OAAO,GAAG,WAAW,CAAC,KAAZ,CAAkB,0BAAlB,CAAhB;EACA,IAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;EAC1B,IAAM,GAAG,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAD,CAAP,CAAW,IAAX,EAAD,CAA9B;EACA,IAAM,KAAK,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAD,CAAP,CAAW,IAAX,EAAD,CAAhC;EACA,IAAI,QAAJ;;EACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;IACzB,QAAQ,GAAG,8BAA8B,CACvC,UAAU,CAAC,IAAX,CAAgB,4BAAhB,CADuC,CAAzC;EAGD;;EACD,OAAO;IAAE,GAAG,EAAA,GAAL;IAAO,KAAK,EAAA,KAAZ;IAAc,QAAQ,EAAA;EAAtB,CAAP;AACD,CAhBM;AAkBP;;;AAGG;;AACH,OAAO,IAAM,uBAAuB,GAAG,SAA1B,uBAA0B,CAAC,KAAD,EAAe;EACpD,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,CAAC,MAAN,KAAiB,CAAlD,EAAqD,OAAO,EAAP;EACrD,OAAO,KAAK,CACT,KADI,CACE,uBADF,EAEJ,GAFI,CAEA,UAAA,KAAA,EAAK;IACR,OAAO,iBAAiB,CAAC,KAAD,CAAxB;EACD,CAJI,EAKJ,MALI,CAKG,UAAA,OAAA,EAAO;IAAI,OAAA,OAAO,KAAK,SAAZ,IAAyB,OAAO,CAAC,KAAR,CAAc,MAAd,GAAzB,CAAA;EAAiD,CAL/D,EAMJ,MANI,CAM2B,UAAC,OAAD,EAAU,OAAV,EAAiB;IAC/C,OAAO,CAAC,OAAQ,CAAC,GAAV,CAAP,GAAwB,OAAQ,CAAC,KAAjC;IACA,OAAO,OAAP;EACD,CATI,EASF,EATE,CAAP;AAUD,CAZM","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport var serializeKeyPairs = function (keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n};\nexport var getKeyPairs = function (baggage) {\n    return baggage\n        .getAllEntries()\n        .map(function (_a) {\n        var key = _a[0], value = _a[1];\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n    });\n};\nexport var parsePairKeyValue = function (entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (keyPair.length !== 2)\n        return;\n    var key = decodeURIComponent(keyPair[0].trim());\n    var value = decodeURIComponent(keyPair[1].trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n};\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport var parseKeyPairsIntoRecord = function (value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}