{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { AlwaysOffSampler, AlwaysOnSampler, getEnv, TracesSamplerValues, ParentBasedSampler, TraceIdRatioBasedSampler } from '@opentelemetry/core';\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\n/**\n * Default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\nexport var DEFAULT_CONFIG = {\n  sampler: buildSamplerFromEnv(env),\n  forceFlushTimeoutMillis: 30000,\n  spanLimits: {\n    attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n    linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n    eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT\n  }\n};\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param env optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\n\nexport function buildSamplerFromEnv(env) {\n  if (env === void 0) {\n    env = getEnv();\n  }\n\n  switch (env.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler()\n      });\n\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler()\n      });\n\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(env));\n\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(env))\n      });\n\n    default:\n      diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + env.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n      return new AlwaysOnSampler();\n  }\n}\nvar DEFAULT_RATIO = 1;\n\nfunction getSamplerProbabilityFromEnv(env) {\n  if (env.OTEL_TRACES_SAMPLER_ARG === undefined || env.OTEL_TRACES_SAMPLER_ARG === '') {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n\n  var probability = Number(env.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + env.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + env.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}","map":{"version":3,"sources":["../../src/config.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,IAAT,QAA8B,oBAA9B;AACA,SACE,gBADF,EAEE,eAFF,EAGE,MAHF,EAIE,mBAJF,EAKE,kBALF,EAOE,wBAPF,QAQO,qBARP;AAUA,IAAM,GAAG,GAAG,MAAM,EAAlB;AACA,IAAM,4BAA4B,GAAG,mBAAmB,CAAC,QAAzD;AAEA;;;;;AAKG;;AACH,OAAO,IAAM,cAAc,GAAG;EAC5B,OAAO,EAAE,mBAAmB,CAAC,GAAD,CADA;EAE5B,uBAAuB,EAAE,KAFG;EAG5B,UAAU,EAAE;IACV,mBAAmB,EAAE,MAAM,GAAG,+BADpB;IAEV,cAAc,EAAE,MAAM,GAAG,0BAFf;IAGV,eAAe,EAAE,MAAM,GAAG;EAHhB;AAHgB,CAAvB;AAUP;;;AAGG;;AACH,OAAM,SAAU,mBAAV,CACJ,GADI,EACiC;EAArC,IAAA,GAAA,KAAA,KAAA,CAAA,EAAA;IAAA,GAAA,GAA6B,MAAM,EAAnC;EAAqC;;EAErC,QAAQ,GAAG,CAAC,mBAAZ;IACE,KAAK,mBAAmB,CAAC,QAAzB;MACE,OAAO,IAAI,eAAJ,EAAP;;IACF,KAAK,mBAAmB,CAAC,SAAzB;MACE,OAAO,IAAI,gBAAJ,EAAP;;IACF,KAAK,mBAAmB,CAAC,mBAAzB;MACE,OAAO,IAAI,kBAAJ,CAAuB;QAC5B,IAAI,EAAE,IAAI,eAAJ;MADsB,CAAvB,CAAP;;IAGF,KAAK,mBAAmB,CAAC,oBAAzB;MACE,OAAO,IAAI,kBAAJ,CAAuB;QAC5B,IAAI,EAAE,IAAI,gBAAJ;MADsB,CAAvB,CAAP;;IAGF,KAAK,mBAAmB,CAAC,YAAzB;MACE,OAAO,IAAI,wBAAJ,CAA6B,4BAA4B,CAAC,GAAD,CAAzD,CAAP;;IACF,KAAK,mBAAmB,CAAC,uBAAzB;MACE,OAAO,IAAI,kBAAJ,CAAuB;QAC5B,IAAI,EAAE,IAAI,wBAAJ,CAA6B,4BAA4B,CAAC,GAAD,CAAzD;MADsB,CAAvB,CAAP;;IAGF;MACE,IAAI,CAAC,KAAL,CACE,iCAA8B,GAAG,CAAC,mBAAlC,GAAqD,0BAArD,GAAgF,4BAAhF,GAA4G,KAD9G;MAGA,OAAO,IAAI,eAAJ,EAAP;EAvBJ;AAyBD;AAED,IAAM,aAAa,GAAG,CAAtB;;AAEA,SAAS,4BAAT,CACE,GADF,EAC4B;EAE1B,IACE,GAAG,CAAC,uBAAJ,KAAgC,SAAhC,IACA,GAAG,CAAC,uBAAJ,KAAgC,EAFlC,EAGE;IACA,IAAI,CAAC,KAAL,CACE,qDAAmD,aAAnD,GAAgE,GADlE;IAGA,OAAO,aAAP;EACD;;EAED,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,uBAAL,CAA1B;;EAEA,IAAI,KAAK,CAAC,WAAD,CAAT,EAAwB;IACtB,IAAI,CAAC,KAAL,CACE,6BAA2B,GAAG,CAAC,uBAA/B,GAAsD,+CAAtD,GAAsG,aAAtG,GAAmH,GADrH;IAGA,OAAO,aAAP;EACD;;EAED,IAAI,WAAW,GAAG,CAAd,IAAmB,WAAW,GAAG,CAArC,EAAwC;IACtC,IAAI,CAAC,KAAL,CACE,6BAA2B,GAAG,CAAC,uBAA/B,GAAsD,6DAAtD,GAAoH,aAApH,GAAiI,GADnI;IAGA,OAAO,aAAP;EACD;;EAED,OAAO,WAAP;AACD","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { AlwaysOffSampler, AlwaysOnSampler, getEnv, TracesSamplerValues, ParentBasedSampler, TraceIdRatioBasedSampler, } from '@opentelemetry/core';\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\n/**\n * Default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\nexport var DEFAULT_CONFIG = {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    spanLimits: {\n        attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n        linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n        eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n    },\n};\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param env optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(env) {\n    if (env === void 0) { env = getEnv(); }\n    switch (env.OTEL_TRACES_SAMPLER) {\n        case TracesSamplerValues.AlwaysOn:\n            return new AlwaysOnSampler();\n        case TracesSamplerValues.AlwaysOff:\n            return new AlwaysOffSampler();\n        case TracesSamplerValues.ParentBasedAlwaysOn:\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n        case TracesSamplerValues.ParentBasedAlwaysOff:\n            return new ParentBasedSampler({\n                root: new AlwaysOffSampler(),\n            });\n        case TracesSamplerValues.TraceIdRatio:\n            return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(env));\n        case TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new ParentBasedSampler({\n                root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(env)),\n            });\n        default:\n            diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + env.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n            return new AlwaysOnSampler();\n    }\n}\nvar DEFAULT_RATIO = 1;\nfunction getSamplerProbabilityFromEnv(env) {\n    if (env.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        env.OTEL_TRACES_SAMPLER_ARG === '') {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(env.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + env.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + env.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map"]},"metadata":{},"sourceType":"module"}