{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\n\n\nvar NoopMeter =\n/** @class */\nfunction () {\n  function NoopMeter() {}\n  /**\n   * Returns constant noop value recorder.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  NoopMeter.prototype.createValueRecorder = function (_name, _options) {\n    return NOOP_VALUE_RECORDER_METRIC;\n  };\n  /**\n   * Returns a constant noop counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  NoopMeter.prototype.createCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * Returns a constant noop UpDownCounter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * Returns constant noop value observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n\n\n  NoopMeter.prototype.createValueObserver = function (_name, _options, _callback) {\n    return NOOP_VALUE_OBSERVER_METRIC;\n  };\n  /**\n   * Returns constant noop sum observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the sum observer callback\n   */\n\n\n  NoopMeter.prototype.createSumObserver = function (_name, _options, _callback) {\n    return NOOP_SUM_OBSERVER_METRIC;\n  };\n  /**\n   * Returns constant noop up down sum observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the up down sum observer callback\n   */\n\n\n  NoopMeter.prototype.createUpDownSumObserver = function (_name, _options, _callback) {\n    return NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n  };\n  /**\n   * Returns constant noop batch observer.\n   * @param name the name of the metric.\n   * @param callback the batch observer callback\n   */\n\n\n  NoopMeter.prototype.createBatchObserver = function (_callback) {\n    return NOOP_BATCH_OBSERVER;\n  };\n\n  return NoopMeter;\n}();\n\nexport { NoopMeter };\n\nvar NoopMetric =\n/** @class */\nfunction () {\n  function NoopMetric(instrument) {\n    this._instrument = instrument;\n  }\n  /**\n   * Returns a Bound Instrument associated with specified Labels.\n   * It is recommended to keep a reference to the Bound Instrument instead of\n   * always calling this method for every operations.\n   * @param labels key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n\n\n  NoopMetric.prototype.bind = function (_labels) {\n    return this._instrument;\n  };\n  /**\n   * Removes the Binding from the metric, if it is present.\n   * @param labels key-values pairs that are associated with a specific metric.\n   */\n\n\n  NoopMetric.prototype.unbind = function (_labels) {\n    return;\n  };\n  /**\n   * Clears all timeseries from the Metric.\n   */\n\n\n  NoopMetric.prototype.clear = function () {\n    return;\n  };\n\n  return NoopMetric;\n}();\n\nexport { NoopMetric };\n\nvar NoopCounterMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopCounterMetric, _super);\n\n  function NoopCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopCounterMetric.prototype.add = function (value, labels) {\n    this.bind(labels).add(value);\n  };\n\n  return NoopCounterMetric;\n}(NoopMetric);\n\nexport { NoopCounterMetric };\n\nvar NoopValueRecorderMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopValueRecorderMetric, _super);\n\n  function NoopValueRecorderMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopValueRecorderMetric.prototype.record = function (value, labels) {\n    this.bind(labels).record(value);\n  };\n\n  return NoopValueRecorderMetric;\n}(NoopMetric);\n\nexport { NoopValueRecorderMetric };\n\nvar NoopBaseObserverMetric =\n/** @class */\nfunction (_super) {\n  __extends(NoopBaseObserverMetric, _super);\n\n  function NoopBaseObserverMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NoopBaseObserverMetric.prototype.observation = function () {\n    return {\n      observer: this,\n      value: 0\n    };\n  };\n\n  return NoopBaseObserverMetric;\n}(NoopMetric);\n\nexport { NoopBaseObserverMetric };\n\nvar NoopBatchObserver =\n/** @class */\nfunction () {\n  function NoopBatchObserver() {}\n\n  return NoopBatchObserver;\n}();\n\nexport { NoopBatchObserver };\n\nvar NoopBoundCounter =\n/** @class */\nfunction () {\n  function NoopBoundCounter() {}\n\n  NoopBoundCounter.prototype.add = function (_value) {\n    return;\n  };\n\n  return NoopBoundCounter;\n}();\n\nexport { NoopBoundCounter };\n\nvar NoopBoundValueRecorder =\n/** @class */\nfunction () {\n  function NoopBoundValueRecorder() {}\n\n  NoopBoundValueRecorder.prototype.record = function (_value, _baggage, _spanContext) {\n    return;\n  };\n\n  return NoopBoundValueRecorder;\n}();\n\nexport { NoopBoundValueRecorder };\n\nvar NoopBoundBaseObserver =\n/** @class */\nfunction () {\n  function NoopBoundBaseObserver() {}\n\n  NoopBoundBaseObserver.prototype.update = function (_value) {};\n\n  return NoopBoundBaseObserver;\n}();\n\nexport { NoopBoundBaseObserver };\nexport var NOOP_METER = new NoopMeter();\nexport var NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric(NOOP_BOUND_COUNTER);\nexport var NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexport var NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(NOOP_BOUND_VALUE_RECORDER);\nexport var NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexport var NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_BATCH_OBSERVER = new NoopBatchObserver();","map":{"version":3,"sources":["../../src/NoopMeter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * Returns constant noop value recorder.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createValueRecorder = function (_name, _options) {\n        return NOOP_VALUE_RECORDER_METRIC;\n    };\n    /**\n     * Returns a constant noop counter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * Returns a constant noop UpDownCounter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * Returns constant noop value observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the value observer callback\n     */\n    NoopMeter.prototype.createValueObserver = function (_name, _options, _callback) {\n        return NOOP_VALUE_OBSERVER_METRIC;\n    };\n    /**\n     * Returns constant noop sum observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the sum observer callback\n     */\n    NoopMeter.prototype.createSumObserver = function (_name, _options, _callback) {\n        return NOOP_SUM_OBSERVER_METRIC;\n    };\n    /**\n     * Returns constant noop up down sum observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the up down sum observer callback\n     */\n    NoopMeter.prototype.createUpDownSumObserver = function (_name, _options, _callback) {\n        return NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n    };\n    /**\n     * Returns constant noop batch observer.\n     * @param name the name of the metric.\n     * @param callback the batch observer callback\n     */\n    NoopMeter.prototype.createBatchObserver = function (_callback) {\n        return NOOP_BATCH_OBSERVER;\n    };\n    return NoopMeter;\n}());\nexport { NoopMeter };\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric(instrument) {\n        this._instrument = instrument;\n    }\n    /**\n     * Returns a Bound Instrument associated with specified Labels.\n     * It is recommended to keep a reference to the Bound Instrument instead of\n     * always calling this method for every operations.\n     * @param labels key-values pairs that are associated with a specific metric\n     *     that you want to record.\n     */\n    NoopMetric.prototype.bind = function (_labels) {\n        return this._instrument;\n    };\n    /**\n     * Removes the Binding from the metric, if it is present.\n     * @param labels key-values pairs that are associated with a specific metric.\n     */\n    NoopMetric.prototype.unbind = function (_labels) {\n        return;\n    };\n    /**\n     * Clears all timeseries from the Metric.\n     */\n    NoopMetric.prototype.clear = function () {\n        return;\n    };\n    return NoopMetric;\n}());\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (value, labels) {\n        this.bind(labels).add(value);\n    };\n    return NoopCounterMetric;\n}(NoopMetric));\nexport { NoopCounterMetric };\nvar NoopValueRecorderMetric = /** @class */ (function (_super) {\n    __extends(NoopValueRecorderMetric, _super);\n    function NoopValueRecorderMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopValueRecorderMetric.prototype.record = function (value, labels) {\n        this.bind(labels).record(value);\n    };\n    return NoopValueRecorderMetric;\n}(NoopMetric));\nexport { NoopValueRecorderMetric };\nvar NoopBaseObserverMetric = /** @class */ (function (_super) {\n    __extends(NoopBaseObserverMetric, _super);\n    function NoopBaseObserverMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopBaseObserverMetric.prototype.observation = function () {\n        return {\n            observer: this,\n            value: 0,\n        };\n    };\n    return NoopBaseObserverMetric;\n}(NoopMetric));\nexport { NoopBaseObserverMetric };\nvar NoopBatchObserver = /** @class */ (function () {\n    function NoopBatchObserver() {\n    }\n    return NoopBatchObserver;\n}());\nexport { NoopBatchObserver };\nvar NoopBoundCounter = /** @class */ (function () {\n    function NoopBoundCounter() {\n    }\n    NoopBoundCounter.prototype.add = function (_value) {\n        return;\n    };\n    return NoopBoundCounter;\n}());\nexport { NoopBoundCounter };\nvar NoopBoundValueRecorder = /** @class */ (function () {\n    function NoopBoundValueRecorder() {\n    }\n    NoopBoundValueRecorder.prototype.record = function (_value, _baggage, _spanContext) {\n        return;\n    };\n    return NoopBoundValueRecorder;\n}());\nexport { NoopBoundValueRecorder };\nvar NoopBoundBaseObserver = /** @class */ (function () {\n    function NoopBoundBaseObserver() {\n    }\n    NoopBoundBaseObserver.prototype.update = function (_value) { };\n    return NoopBoundBaseObserver;\n}());\nexport { NoopBoundBaseObserver };\nexport var NOOP_METER = new NoopMeter();\nexport var NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric(NOOP_BOUND_COUNTER);\nexport var NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexport var NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(NOOP_BOUND_VALUE_RECORDER);\nexport var NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexport var NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(NOOP_BOUND_BASE_OBSERVER);\nexport var NOOP_BATCH_OBSERVER = new NoopBatchObserver();\n//# sourceMappingURL=NoopMeter.js.map"]},"metadata":{},"sourceType":"module"}