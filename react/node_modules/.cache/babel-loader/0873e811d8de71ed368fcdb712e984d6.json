{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api-metrics';\nimport { Resource } from '@opentelemetry/resources';\nimport { BatchObserver } from './BatchObserver';\nimport { CounterMetric } from './CounterMetric';\nimport { PushController } from './export/Controller';\nimport { NoopExporter } from './export/NoopExporter';\nimport { UngroupedProcessor } from './export/Processor';\nimport { SumObserverMetric } from './SumObserverMetric';\nimport { DEFAULT_CONFIG, DEFAULT_METRIC_OPTIONS } from './types';\nimport { UpDownCounterMetric } from './UpDownCounterMetric';\nimport { UpDownSumObserverMetric } from './UpDownSumObserverMetric';\nimport { ValueObserverMetric } from './ValueObserverMetric';\nimport { ValueRecorderMetric } from './ValueRecorderMetric'; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nvar merge = require('lodash.merge');\n/**\n * Meter is an implementation of the {@link Meter} interface.\n */\n\n\nvar Meter =\n/** @class */\nfunction () {\n  /**\n   * Constructs a new Meter instance.\n   */\n  function Meter(instrumentationLibrary, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _a;\n\n    this._batchObservers = [];\n    this._metrics = new Map();\n    this._isShutdown = false;\n    this._shuttingDownPromise = Promise.resolve();\n    var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n    this._processor = (_a = mergedConfig.processor) !== null && _a !== void 0 ? _a : new UngroupedProcessor();\n    this._resource = mergedConfig.resource || Resource.empty();\n    this._instrumentationLibrary = instrumentationLibrary; // start the push controller\n\n    var exporter = mergedConfig.exporter || new NoopExporter();\n    var interval = mergedConfig.interval;\n    this._controller = new PushController(this, exporter, interval);\n  }\n  /**\n   * Creates and returns a new {@link ValueRecorder}.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  Meter.prototype.createValueRecorder = function (name, options) {\n    if (!this._isValidName(name)) {\n      diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n      return api.NOOP_VALUE_RECORDER_METRIC;\n    }\n\n    var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n\n    var valueRecorder = new ValueRecorderMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n\n    this._registerMetric(name, valueRecorder);\n\n    return valueRecorder;\n  };\n  /**\n   * Creates a new counter metric. Generally, this kind of metric when the\n   * value is a quantity, the sum is of primary interest, and the event count\n   * and value distribution are not of primary interest.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  Meter.prototype.createCounter = function (name, options) {\n    if (!this._isValidName(name)) {\n      diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n      return api.NOOP_COUNTER_METRIC;\n    }\n\n    var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n\n    var counter = new CounterMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n\n    this._registerMetric(name, counter);\n\n    return counter;\n  };\n  /**\n   * Creates a new `UpDownCounter` metric. UpDownCounter is a synchronous\n   * instrument and very similar to Counter except that Add(increment)\n   * supports negative increments. It is generally useful for capturing changes\n   * in an amount of resources used, or any quantity that rises and falls\n   * during a request.\n   *\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n\n\n  Meter.prototype.createUpDownCounter = function (name, options) {\n    if (!this._isValidName(name)) {\n      diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n      return api.NOOP_COUNTER_METRIC;\n    }\n\n    var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n\n    var upDownCounter = new UpDownCounterMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n\n    this._registerMetric(name, upDownCounter);\n\n    return upDownCounter;\n  };\n  /**\n   * Creates a new `ValueObserver` metric.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n\n\n  Meter.prototype.createValueObserver = function (name, options, callback) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!this._isValidName(name)) {\n      diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n      return api.NOOP_VALUE_OBSERVER_METRIC;\n    }\n\n    var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n\n    var valueObserver = new ValueObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n\n    this._registerMetric(name, valueObserver);\n\n    return valueObserver;\n  };\n\n  Meter.prototype.createSumObserver = function (name, options, callback) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!this._isValidName(name)) {\n      diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n      return api.NOOP_SUM_OBSERVER_METRIC;\n    }\n\n    var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n\n    var sumObserver = new SumObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n\n    this._registerMetric(name, sumObserver);\n\n    return sumObserver;\n  };\n  /**\n   * Creates a new `UpDownSumObserver` metric.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n\n\n  Meter.prototype.createUpDownSumObserver = function (name, options, callback) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!this._isValidName(name)) {\n      diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n      return api.NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n    }\n\n    var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n\n    var upDownSumObserver = new UpDownSumObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n\n    this._registerMetric(name, upDownSumObserver);\n\n    return upDownSumObserver;\n  };\n  /**\n   * Creates a new batch observer.\n   * @param callback the batch observer callback\n   * @param [options] the batch options.\n   */\n\n\n  Meter.prototype.createBatchObserver = function (callback, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var opt = __assign({}, options);\n\n    var batchObserver = new BatchObserver(opt, callback);\n\n    this._batchObservers.push(batchObserver);\n\n    return batchObserver;\n  };\n  /**\n   * Collects all the metrics created with this `Meter` for export.\n   *\n   * Utilizes the processor to create checkpoints of the current values in\n   * each aggregator belonging to the metrics that were created with this\n   * meter instance.\n   */\n\n\n  Meter.prototype.collect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var observations, metricsRecords;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            observations = this._batchObservers.map(function (observer) {\n              return observer.collect();\n            });\n            return [4\n            /*yield*/\n            , Promise.all(observations)];\n\n          case 1:\n            _a.sent();\n\n            metricsRecords = Array.from(this._metrics.values()).map(function (metric) {\n              return metric.getMetricRecord();\n            });\n            return [4\n            /*yield*/\n            , Promise.all(metricsRecords).then(function (records) {\n              records.forEach(function (metrics) {\n                metrics.forEach(function (metric) {\n                  return _this._processor.process(metric);\n                });\n              });\n            })];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Meter.prototype.getProcessor = function () {\n    return this._processor;\n  };\n\n  Meter.prototype.shutdown = function () {\n    var _this = this;\n\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n\n    this._isShutdown = true;\n    this._shuttingDownPromise = new Promise(function (resolve, reject) {\n      Promise.resolve().then(function () {\n        return _this._controller.shutdown();\n      }).then(resolve).catch(function (e) {\n        reject(e);\n      });\n    });\n    return this._shuttingDownPromise;\n  };\n  /**\n   * Registers metric to register.\n   * @param name The name of the metric.\n   * @param metric The metric to register.\n   */\n\n\n  Meter.prototype._registerMetric = function (name, metric) {\n    if (this._metrics.has(name)) {\n      diag.error(\"A metric with the name \" + name + \" has already been registered.\");\n      return;\n    }\n\n    this._metrics.set(name, metric);\n  };\n  /**\n   * Ensure a metric name conforms to the following rules:\n   *\n   * 1. They are non-empty strings\n   *\n   * 2. The first character must be non-numeric, non-space, non-punctuation\n   *\n   * 3. Subsequent characters must be belong to the alphanumeric characters,\n   *    '_', '.', and '-'.\n   *\n   * Names are case insensitive\n   *\n   * @param name Name of metric to be created\n   */\n\n\n  Meter.prototype._isValidName = function (name) {\n    return Boolean(name.match(/^[a-z][a-z0-9_.-]*$/i));\n  };\n\n  return Meter;\n}();\n\nexport { Meter };","map":{"version":3,"sources":["../../src/Meter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { diag } from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api-metrics';\nimport { Resource } from '@opentelemetry/resources';\nimport { BatchObserver } from './BatchObserver';\nimport { CounterMetric } from './CounterMetric';\nimport { PushController } from './export/Controller';\nimport { NoopExporter } from './export/NoopExporter';\nimport { UngroupedProcessor } from './export/Processor';\nimport { SumObserverMetric } from './SumObserverMetric';\nimport { DEFAULT_CONFIG, DEFAULT_METRIC_OPTIONS } from './types';\nimport { UpDownCounterMetric } from './UpDownCounterMetric';\nimport { UpDownSumObserverMetric } from './UpDownSumObserverMetric';\nimport { ValueObserverMetric } from './ValueObserverMetric';\nimport { ValueRecorderMetric } from './ValueRecorderMetric';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar merge = require('lodash.merge');\n/**\n * Meter is an implementation of the {@link Meter} interface.\n */\nvar Meter = /** @class */ (function () {\n    /**\n     * Constructs a new Meter instance.\n     */\n    function Meter(instrumentationLibrary, config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._batchObservers = [];\n        this._metrics = new Map();\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n        var mergedConfig = merge({}, DEFAULT_CONFIG, config);\n        this._processor = (_a = mergedConfig.processor) !== null && _a !== void 0 ? _a : new UngroupedProcessor();\n        this._resource =\n            mergedConfig.resource || Resource.empty();\n        this._instrumentationLibrary = instrumentationLibrary;\n        // start the push controller\n        var exporter = mergedConfig.exporter || new NoopExporter();\n        var interval = mergedConfig.interval;\n        this._controller = new PushController(this, exporter, interval);\n    }\n    /**\n     * Creates and returns a new {@link ValueRecorder}.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    Meter.prototype.createValueRecorder = function (name, options) {\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_VALUE_RECORDER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var valueRecorder = new ValueRecorderMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n        this._registerMetric(name, valueRecorder);\n        return valueRecorder;\n    };\n    /**\n     * Creates a new counter metric. Generally, this kind of metric when the\n     * value is a quantity, the sum is of primary interest, and the event count\n     * and value distribution are not of primary interest.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    Meter.prototype.createCounter = function (name, options) {\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_COUNTER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var counter = new CounterMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n        this._registerMetric(name, counter);\n        return counter;\n    };\n    /**\n     * Creates a new `UpDownCounter` metric. UpDownCounter is a synchronous\n     * instrument and very similar to Counter except that Add(increment)\n     * supports negative increments. It is generally useful for capturing changes\n     * in an amount of resources used, or any quantity that rises and falls\n     * during a request.\n     *\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    Meter.prototype.createUpDownCounter = function (name, options) {\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_COUNTER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var upDownCounter = new UpDownCounterMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary);\n        this._registerMetric(name, upDownCounter);\n        return upDownCounter;\n    };\n    /**\n     * Creates a new `ValueObserver` metric.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the value observer callback\n     */\n    Meter.prototype.createValueObserver = function (name, options, callback) {\n        if (options === void 0) { options = {}; }\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_VALUE_OBSERVER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var valueObserver = new ValueObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n        this._registerMetric(name, valueObserver);\n        return valueObserver;\n    };\n    Meter.prototype.createSumObserver = function (name, options, callback) {\n        if (options === void 0) { options = {}; }\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_SUM_OBSERVER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var sumObserver = new SumObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n        this._registerMetric(name, sumObserver);\n        return sumObserver;\n    };\n    /**\n     * Creates a new `UpDownSumObserver` metric.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the value observer callback\n     */\n    Meter.prototype.createUpDownSumObserver = function (name, options, callback) {\n        if (options === void 0) { options = {}; }\n        if (!this._isValidName(name)) {\n            diag.warn(\"Invalid metric name \" + name + \". Defaulting to noop metric implementation.\");\n            return api.NOOP_UP_DOWN_SUM_OBSERVER_METRIC;\n        }\n        var opt = __assign(__assign({}, DEFAULT_METRIC_OPTIONS), options);\n        var upDownSumObserver = new UpDownSumObserverMetric(name, opt, this._processor, this._resource, this._instrumentationLibrary, callback);\n        this._registerMetric(name, upDownSumObserver);\n        return upDownSumObserver;\n    };\n    /**\n     * Creates a new batch observer.\n     * @param callback the batch observer callback\n     * @param [options] the batch options.\n     */\n    Meter.prototype.createBatchObserver = function (callback, options) {\n        if (options === void 0) { options = {}; }\n        var opt = __assign({}, options);\n        var batchObserver = new BatchObserver(opt, callback);\n        this._batchObservers.push(batchObserver);\n        return batchObserver;\n    };\n    /**\n     * Collects all the metrics created with this `Meter` for export.\n     *\n     * Utilizes the processor to create checkpoints of the current values in\n     * each aggregator belonging to the metrics that were created with this\n     * meter instance.\n     */\n    Meter.prototype.collect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var observations, metricsRecords;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        observations = this._batchObservers.map(function (observer) {\n                            return observer.collect();\n                        });\n                        return [4 /*yield*/, Promise.all(observations)];\n                    case 1:\n                        _a.sent();\n                        metricsRecords = Array.from(this._metrics.values()).map(function (metric) {\n                            return metric.getMetricRecord();\n                        });\n                        return [4 /*yield*/, Promise.all(metricsRecords).then(function (records) {\n                                records.forEach(function (metrics) {\n                                    metrics.forEach(function (metric) { return _this._processor.process(metric); });\n                                });\n                            })];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Meter.prototype.getProcessor = function () {\n        return this._processor;\n    };\n    Meter.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this._controller.shutdown();\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    /**\n     * Registers metric to register.\n     * @param name The name of the metric.\n     * @param metric The metric to register.\n     */\n    Meter.prototype._registerMetric = function (name, metric) {\n        if (this._metrics.has(name)) {\n            diag.error(\"A metric with the name \" + name + \" has already been registered.\");\n            return;\n        }\n        this._metrics.set(name, metric);\n    };\n    /**\n     * Ensure a metric name conforms to the following rules:\n     *\n     * 1. They are non-empty strings\n     *\n     * 2. The first character must be non-numeric, non-space, non-punctuation\n     *\n     * 3. Subsequent characters must be belong to the alphanumeric characters,\n     *    '_', '.', and '-'.\n     *\n     * Names are case insensitive\n     *\n     * @param name Name of metric to be created\n     */\n    Meter.prototype._isValidName = function (name) {\n        return Boolean(name.match(/^[a-z][a-z0-9_.-]*$/i));\n    };\n    return Meter;\n}());\nexport { Meter };\n//# sourceMappingURL=Meter.js.map"]},"metadata":{},"sourceType":"module"}