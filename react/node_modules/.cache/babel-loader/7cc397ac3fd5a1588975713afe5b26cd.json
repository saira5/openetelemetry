{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BaggageImpl =\n/** @class */\nfunction () {\n  function BaggageImpl(entries) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  BaggageImpl.prototype.getEntry = function (key) {\n    var entry = this._entries.get(key);\n\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  };\n\n  BaggageImpl.prototype.getAllEntries = function () {\n    return Array.from(this._entries.entries()).map(function (_a) {\n      var k = _a[0],\n          v = _a[1];\n      return [k, v];\n    });\n  };\n\n  BaggageImpl.prototype.setEntry = function (key, entry) {\n    var newBaggage = new BaggageImpl(this._entries);\n\n    newBaggage._entries.set(key, entry);\n\n    return newBaggage;\n  };\n\n  BaggageImpl.prototype.removeEntry = function (key) {\n    var newBaggage = new BaggageImpl(this._entries);\n\n    newBaggage._entries.delete(key);\n\n    return newBaggage;\n  };\n\n  BaggageImpl.prototype.removeEntries = function () {\n    var keys = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      keys[_i] = arguments[_i];\n    }\n\n    var newBaggage = new BaggageImpl(this._entries);\n\n    for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\n      var key = keys_1[_a];\n\n      newBaggage._entries.delete(key);\n    }\n\n    return newBaggage;\n  };\n\n  BaggageImpl.prototype.clear = function () {\n    return new BaggageImpl();\n  };\n\n  return BaggageImpl;\n}();\n\nexport { BaggageImpl };","map":{"version":3,"sources":["../../../../src/baggage/internal/baggage-impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAIH,IAAA,WAAA;AAAA;AAAA,YAAA;EAGE,SAAA,WAAA,CAAY,OAAZ,EAA+C;IAC7C,KAAK,QAAL,GAAgB,OAAO,GAAG,IAAI,GAAJ,CAAQ,OAAR,CAAH,GAAsB,IAAI,GAAJ,EAA7C;EACD;;EAED,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAoB;IAClB,IAAM,KAAK,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,GAAlB,CAAd;;IACA,IAAI,CAAC,KAAL,EAAY;MACV,OAAO,SAAP;IACD;;IAED,OAAO,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAlB,CAAP;EACD,CAPD;;EASA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;IACE,OAAO,KAAK,CAAC,IAAN,CAAW,KAAK,QAAL,CAAc,OAAd,EAAX,EAAoC,GAApC,CAAwC,UAAC,EAAD,EAAO;UAAL,CAAC,GAAA,EAAA,CAAA,CAAA,C;UAAE,CAAC,GAAA,EAAA,CAAA,CAAA,C;MAAM,OAAA,CAAC,CAAD,EAAI,CAAJ,CAAA;IAAM,CAA1D,CAAP;EACD,CAFD;;EAIA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAsB,KAAtB,EAAyC;IACvC,IAAM,UAAU,GAAG,IAAI,WAAJ,CAAgB,KAAK,QAArB,CAAnB;;IACA,UAAU,CAAC,QAAX,CAAoB,GAApB,CAAwB,GAAxB,EAA6B,KAA7B;;IACA,OAAO,UAAP;EACD,CAJD;;EAMA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,GAAZ,EAAuB;IACrB,IAAM,UAAU,GAAG,IAAI,WAAJ,CAAgB,KAAK,QAArB,CAAnB;;IACA,UAAU,CAAC,QAAX,CAAoB,MAApB,CAA2B,GAA3B;;IACA,OAAO,UAAP;EACD,CAJD;;EAMA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;IAAc,IAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;MAAjB,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;IACZ,IAAM,UAAU,GAAG,IAAI,WAAJ,CAAgB,KAAK,QAArB,CAAnB;;IACA,KAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAlB,EAAkB,EAAA,GAAA,MAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAAwB;MAAnB,IAAM,GAAG,GAAA,MAAA,CAAA,EAAA,CAAT;;MACH,UAAU,CAAC,QAAX,CAAoB,MAApB,CAA2B,GAA3B;IACD;;IACD,OAAO,UAAP;EACD,CAND;;EAQA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;IACE,OAAO,IAAI,WAAJ,EAAP;EACD,CAFD;;EAGF,OAAA,WAAA;AAAC,CA3CD,EAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}