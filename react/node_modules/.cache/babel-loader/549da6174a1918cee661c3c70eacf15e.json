{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\n\nvar Resource =\n/** @class */\nfunction () {\n  function Resource(\n  /**\n   * A dictionary of attributes with string keys and values that provide\n   * information about the entity as numbers, strings or booleans\n   * TODO: Consider to add check/validation on attributes.\n   */\n  attributes) {\n    this.attributes = attributes;\n  }\n  /**\n   * Returns an empty Resource\n   */\n\n\n  Resource.empty = function () {\n    return Resource.EMPTY;\n  };\n  /**\n   * Returns a Resource that indentifies the SDK in use.\n   */\n\n\n  Resource.default = function () {\n    var _a;\n\n    return new Resource((_a = {}, _a[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(), _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE], _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME], _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION], _a));\n  };\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n\n\n  Resource.prototype.merge = function (other) {\n    if (!other || !Object.keys(other.attributes).length) return this; // SpanAttributes from resource overwrite attributes from other resource.\n\n    var mergedAttributes = Object.assign({}, this.attributes, other.attributes);\n    return new Resource(mergedAttributes);\n  };\n\n  Resource.EMPTY = new Resource({});\n  return Resource;\n}();\n\nexport { Resource };","map":{"version":3,"sources":["../../src/Resource.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,0BAAT,QAA2C,qCAA3C;AACA,SAAS,QAAT,QAAyB,qBAAzB;AAEA,SAAS,kBAAT,QAAmC,YAAnC;AAEA;;;AAGG;;AACH,IAAA,QAAA;AAAA;AAAA,YAAA;EAyBE,SAAA,QAAA;EACE;;;;AAIG;EACM,UANX,EAMyC;IAA9B,KAAA,UAAA,GAAA,UAAA;EACP;EA7BJ;;AAEG;;;EACI,QAAA,CAAA,KAAA,GAAP,YAAA;IACE,OAAO,QAAQ,CAAC,KAAhB;EACD,CAFM;EAIP;;AAEG;;;EACI,QAAA,CAAA,OAAA,GAAP,YAAA;;;IACE,OAAO,IAAI,QAAJ,EAAY,EAAA,GAAA,EAAA,EACjB,EAAA,CAAC,0BAA0B,CAAC,YAA5B,CAAA,GAA2C,kBAAkB,EAD5C,EAEjB,EAAA,CAAC,0BAA0B,CAAC,sBAA5B,CAAA,GACE,QAAQ,CAAC,0BAA0B,CAAC,sBAA5B,CAHO,EAIjB,EAAA,CAAC,0BAA0B,CAAC,kBAA5B,CAAA,GACE,QAAQ,CAAC,0BAA0B,CAAC,kBAA5B,CALO,EAMjB,EAAA,CAAC,0BAA0B,CAAC,qBAA5B,CAAA,GACE,QAAQ,CAAC,0BAA0B,CAAC,qBAA5B,CAPO,EAQjB,EARK,EAAP;EASD,CAVM;EAqBP;;;;;;;AAOG;;;EACH,QAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,KAAN,EAA4B;IAC1B,IAAI,CAAC,KAAD,IAAU,CAAC,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,UAAlB,EAA8B,MAA7C,EAAqD,OAAO,IAAP,CAD3B,CAG1B;;IACA,IAAM,gBAAgB,GAAG,MAAM,CAAC,MAAP,CACvB,EADuB,EAEvB,KAAK,UAFkB,EAGvB,KAAK,CAAC,UAHiB,CAAzB;IAKA,OAAO,IAAI,QAAJ,CAAa,gBAAb,CAAP;EACD,CAVD;;EAzCgB,QAAA,CAAA,KAAA,GAAQ,IAAI,QAAJ,CAAa,EAAb,CAAR;EAoDlB,OAAA,QAAA;AAAC,CArDD,EAAA;;SAAa,Q","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes) {\n        this.attributes = attributes;\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that indentifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(),\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        if (!other || !Object.keys(other.attributes).length)\n            return this;\n        // SpanAttributes from resource overwrite attributes from other resource.\n        var mergedAttributes = Object.assign({}, this.attributes, other.attributes);\n        return new Resource(mergedAttributes);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\nexport { Resource };\n//# sourceMappingURL=Resource.js.map"]},"metadata":{},"sourceType":"module"}