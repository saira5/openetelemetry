{"ast":null,"code":"export function sanitizeAttributes(attributes) {\n  var out = {};\n\n  if (attributes == null || typeof attributes !== 'object') {\n    return out;\n  } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n  for (var _i = 0, _a = Object.entries(attributes); _i < _a.length; _i++) {\n    var _b = _a[_i],\n        k = _b[0],\n        v = _b[1];\n\n    if (isAttributeValue(v)) {\n      if (Array.isArray(v)) {\n        out[k] = v.slice();\n      } else {\n        out[k] = v;\n      }\n    }\n  }\n\n  return out;\n}\nexport function isAttributeValue(val) {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr) {\n  var type;\n\n  for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n    var element = arr_1[_i]; // null/undefined elements are allowed\n\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      } // encountered an invalid primitive\n\n\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val) {\n  switch (typeof val) {\n    case 'number':\n      return true;\n\n    case 'boolean':\n      return true;\n\n    case 'string':\n      return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../../src/common/attributes.ts"],"names":[],"mappings":"AAiBA,OAAM,SAAU,kBAAV,CAA6B,UAA7B,EAAgD;EACpD,IAAM,GAAG,GAAmB,EAA5B;;EAEA,IAAI,UAAU,IAAI,IAAd,IAAsB,OAAO,UAAP,KAAsB,QAAhD,EAA0D;IACxD,OAAO,GAAP;EACD,CALmD,CAOpD;;;EACA,KAAqB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,OAAP,CAAe,UAAf,CAArB,EAAqB,EAAA,GAAA,EAAA,CAAA,MAArB,EAAqB,EAAA,EAArB,EAAkD;IAAvC,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA;IAAA,IAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF;IAAA,IAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;;IACT,IAAI,gBAAgB,CAAC,CAAD,CAApB,EAAyB;MACvB,IAAI,KAAK,CAAC,OAAN,CAAc,CAAd,CAAJ,EAAsB;QACpB,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAC,KAAF,EAAT;MACD,CAFD,MAEO;QACL,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;MACD;IACF;EACF;;EAED,OAAO,GAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,GAA3B,EAAuC;EAC3C,IAAI,GAAG,IAAI,IAAX,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,IAAI,KAAK,CAAC,OAAN,CAAc,GAAd,CAAJ,EAAwB;IACtB,OAAO,gCAAgC,CAAC,GAAD,CAAvC;EACD;;EAED,OAAO,8BAA8B,CAAC,GAAD,CAArC;AACD;;AAED,SAAS,gCAAT,CAA0C,GAA1C,EAAwD;EACtD,IAAI,IAAJ;;EAEA,KAAsB,IAAA,EAAA,GAAA,CAAA,EAAA,KAAA,GAAA,GAAtB,EAAsB,EAAA,GAAA,KAAA,CAAA,MAAtB,EAAsB,EAAA,EAAtB,EAA2B;IAAtB,IAAM,OAAO,GAAA,KAAA,CAAA,EAAA,CAAb,CAAsB,CACzB;;IACA,IAAI,OAAO,IAAI,IAAf,EAAqB;;IAErB,IAAI,CAAC,IAAL,EAAW;MACT,IAAI,8BAA8B,CAAC,OAAD,CAAlC,EAA6C;QAC3C,IAAI,GAAG,OAAO,OAAd;QACA;MACD,CAJQ,CAKT;;;MACA,OAAO,KAAP;IACD;;IAED,IAAI,OAAO,OAAP,KAAmB,IAAvB,EAA6B;MAC3B;IACD;;IAED,OAAO,KAAP;EACD;;EAED,OAAO,IAAP;AACD;;AAED,SAAS,8BAAT,CAAwC,GAAxC,EAAoD;EAClD,QAAQ,OAAO,GAAf;IACE,KAAK,QAAL;MACE,OAAO,IAAP;;IACF,KAAK,SAAL;MACE,OAAO,IAAP;;IACF,KAAK,QAAL;MACE,OAAO,IAAP;EANJ;;EASA,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["export function sanitizeAttributes(attributes) {\n    var out = {};\n    if (attributes == null || typeof attributes !== 'object') {\n        return out;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    for (var _i = 0, _a = Object.entries(attributes); _i < _a.length; _i++) {\n        var _b = _a[_i], k = _b[0], v = _b[1];\n        if (isAttributeValue(v)) {\n            if (Array.isArray(v)) {\n                out[k] = v.slice();\n            }\n            else {\n                out[k] = v;\n            }\n        }\n    }\n    return out;\n}\nexport function isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    var type;\n    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n        var element = arr_1[_i];\n        // null/undefined elements are allowed\n        if (element == null)\n            continue;\n        if (!type) {\n            if (isValidPrimitiveAttributeValue(element)) {\n                type = typeof element;\n                continue;\n            }\n            // encountered an invalid primitive\n            return false;\n        }\n        if (typeof element === type) {\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n            return true;\n        case 'boolean':\n            return true;\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map"]},"metadata":{},"sourceType":"module"}