{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\n\nvar WebTracerProvider =\n/** @class */\nfunction (_super) {\n  __extends(WebTracerProvider, _super);\n  /**\n   * Constructs a new Tracer instance.\n   * @param config Web Tracer config\n   */\n\n\n  function WebTracerProvider(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this, config) || this;\n\n    if (config.contextManager) {\n      throw 'contextManager should be defined in register method not in' + ' constructor';\n    }\n\n    if (config.propagator) {\n      throw 'propagator should be defined in register method not in constructor';\n    }\n\n    return _this;\n  }\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n\n\n  WebTracerProvider.prototype.register = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    if (config.contextManager === undefined) {\n      config.contextManager = new StackContextManager();\n    }\n\n    if (config.contextManager) {\n      config.contextManager.enable();\n    }\n\n    _super.prototype.register.call(this, config);\n  };\n\n  return WebTracerProvider;\n}(BasicTracerProvider);\n\nexport { WebTracerProvider };","map":{"version":3,"sources":["../../src/WebTracerProvider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,SACE,mBADF,QAIO,+BAJP;AAKA,SAAS,mBAAT,QAAoC,uBAApC;AAOA;;AAEG;;AACH,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAuC,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;EACrC;;;AAGG;;;EACH,SAAA,iBAAA,CAAY,MAAZ,EAAwC;IAA5B,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,EAAA;IAA4B;;IAAxC,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAN,KAAa,IADf;;IAGE,IAAK,MAAgC,CAAC,cAAtC,EAAsD;MACpD,MACE,+DACA,cAFF;IAID;;IACD,IAAK,MAAgC,CAAC,UAAtC,EAAkD;MAChD,MAAM,oEAAN;IACD;;;EACF;EAED;;;;;;AAMG;;;EACM,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAT,UAAkB,MAAlB,EAAoD;IAAlC,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,EAAA;IAAkC;;IAClD,IAAI,MAAM,CAAC,cAAP,KAA0B,SAA9B,EAAyC;MACvC,MAAM,CAAC,cAAP,GAAwB,IAAI,mBAAJ,EAAxB;IACD;;IACD,IAAI,MAAM,CAAC,cAAX,EAA2B;MACzB,MAAM,CAAC,cAAP,CAAsB,MAAtB;IACD;;IAED,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,MAAf;EACD,CATQ;;EAUX,OAAA,iBAAA;AAAC,CApCD,CAAuC,mBAAvC,CAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BasicTracerProvider, } from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nvar WebTracerProvider = /** @class */ (function (_super) {\n    __extends(WebTracerProvider, _super);\n    /**\n     * Constructs a new Tracer instance.\n     * @param config Web Tracer config\n     */\n    function WebTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        if (config.contextManager) {\n            throw ('contextManager should be defined in register method not in' +\n                ' constructor');\n        }\n        if (config.propagator) {\n            throw 'propagator should be defined in register method not in constructor';\n        }\n        return _this;\n    }\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    WebTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        if (config.contextManager === undefined) {\n            config.contextManager = new StackContextManager();\n        }\n        if (config.contextManager) {\n            config.contextManager.enable();\n        }\n        _super.prototype.register.call(this, config);\n    };\n    return WebTracerProvider;\n}(BasicTracerProvider));\nexport { WebTracerProvider };\n//# sourceMappingURL=WebTracerProvider.js.map"]},"metadata":{},"sourceType":"module"}