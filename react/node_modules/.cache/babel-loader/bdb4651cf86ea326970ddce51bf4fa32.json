{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '../types';\nexport function createLogLevelDiagLogger(maxLevel, logger) {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  } // In case the logger is null or undefined\n\n\n  logger = logger || {};\n\n  function _filterFunc(funcName, theLevel) {\n    var theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE)\n  };\n}","map":{"version":3,"sources":["../../../../src/diag/internal/logLevelLogger.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAsC,YAAtC,QAA0D,UAA1D;AAEA,OAAM,SAAU,wBAAV,CACJ,QADI,EAEJ,MAFI,EAEc;EAElB,IAAI,QAAQ,GAAG,YAAY,CAAC,IAA5B,EAAkC;IAChC,QAAQ,GAAG,YAAY,CAAC,IAAxB;EACD,CAFD,MAEO,IAAI,QAAQ,GAAG,YAAY,CAAC,GAA5B,EAAiC;IACtC,QAAQ,GAAG,YAAY,CAAC,GAAxB;EACD,CANiB,CAQlB;;;EACA,MAAM,GAAG,MAAM,IAAI,EAAnB;;EAEA,SAAS,WAAT,CACE,QADF,EAEE,QAFF,EAEwB;IAEtB,IAAM,OAAO,GAAG,MAAM,CAAC,QAAD,CAAtB;;IAEA,IAAI,OAAO,OAAP,KAAmB,UAAnB,IAAiC,QAAQ,IAAI,QAAjD,EAA2D;MACzD,OAAO,OAAO,CAAC,IAAR,CAAa,MAAb,CAAP;IACD;;IACD,OAAO,YAAA,CAAc,CAArB;EACD;;EAED,OAAO;IACL,KAAK,EAAE,WAAW,CAAC,OAAD,EAAU,YAAY,CAAC,KAAvB,CADb;IAEL,IAAI,EAAE,WAAW,CAAC,MAAD,EAAS,YAAY,CAAC,IAAtB,CAFZ;IAGL,IAAI,EAAE,WAAW,CAAC,MAAD,EAAS,YAAY,CAAC,IAAtB,CAHZ;IAIL,KAAK,EAAE,WAAW,CAAC,OAAD,EAAU,YAAY,CAAC,KAAvB,CAJb;IAKL,OAAO,EAAE,WAAW,CAAC,SAAD,EAAY,YAAY,CAAC,OAAzB;EALf,CAAP;AAOD","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}