{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\n\nvar ENVIRONMENT_NUMBERS_KEYS = ['OTEL_BSP_EXPORT_TIMEOUT', 'OTEL_BSP_MAX_EXPORT_BATCH_SIZE', 'OTEL_BSP_MAX_QUEUE_SIZE', 'OTEL_BSP_SCHEDULE_DELAY', 'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT', 'OTEL_SPAN_EVENT_COUNT_LIMIT', 'OTEL_SPAN_LINK_COUNT_LIMIT'];\n\nfunction isEnvVarANumber(key) {\n  return ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1;\n}\n\nvar ENVIRONMENT_LISTS_KEYS = ['OTEL_NO_PATCH_MODULES', 'OTEL_PROPAGATORS'];\n\nfunction isEnvVarAList(key) {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\n/**\n * Default environment variables\n */\n\n\nexport var DEFAULT_ENVIRONMENT = {\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: 128,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_TRACES_EXPORTER: 'none',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: ''\n};\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\n\nfunction parseNumber(name, environment, values, min, max) {\n  if (min === void 0) {\n    min = -Infinity;\n  }\n\n  if (max === void 0) {\n    max = Infinity;\n  }\n\n  if (typeof values[name] !== 'undefined') {\n    var value = Number(values[name]);\n\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\n\n\nfunction parseStringList(name, output, input, separator) {\n  if (separator === void 0) {\n    separator = DEFAULT_LIST_SEPARATOR;\n  }\n\n  var givenValue = input[name];\n\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(function (v) {\n      return v.trim();\n    });\n  }\n} // The support string -> DiagLogLevel mappings\n\n\nvar logLevelMap = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\n\nfunction setLogLevelFromEnv(key, environment, values) {\n  var value = values[key];\n\n  if (typeof value === 'string') {\n    var theLevel = logLevelMap[value.toUpperCase()];\n\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n/**\n * Parses environment values\n * @param values\n */\n\n\nexport function parseEnvironment(values) {\n  var environment = {};\n\n  for (var env in DEFAULT_ENVIRONMENT) {\n    var key = env;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          var value = values[key];\n\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n\n    }\n  }\n\n  return environment;\n}","map":{"version":3,"sources":["../../../src/utils/environment.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: 128,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_TRACES_EXPORTER: 'none',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n};\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n//# sourceMappingURL=environment.js.map"]},"metadata":{},"sourceType":"module"}