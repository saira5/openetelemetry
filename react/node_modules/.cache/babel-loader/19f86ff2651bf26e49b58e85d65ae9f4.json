{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace } from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\n\nvar ParentBasedSampler =\n/** @class */\nfunction () {\n  function ParentBasedSampler(config) {\n    var _a, _b, _c, _d;\n\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled = (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n    this._remoteParentNotSampled = (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n    this._localParentSampled = (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n    this._localParentNotSampled = (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n  }\n\n  ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n    var parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n      }\n\n      return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n\n    return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n  };\n\n  ParentBasedSampler.prototype.toString = function () {\n    return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n  };\n\n  return ParentBasedSampler;\n}();\n\nexport { ParentBasedSampler };","map":{"version":3,"sources":["../../../../src/trace/sampler/ParentBasedSampler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAGE,kBAHF,EAQE,UARF,EAQc,KARd,QASO,oBATP;AAUA,SAAS,kBAAT,QAAmC,mCAAnC;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,eAAT,QAAgC,mBAAhC;AAEA;;;AAGG;;AACH,IAAA,kBAAA;AAAA;AAAA,YAAA;EAOE,SAAA,kBAAA,CAAY,MAAZ,EAA4C;;;IAC1C,KAAK,KAAL,GAAa,MAAM,CAAC,IAApB;;IAEA,IAAI,CAAC,KAAK,KAAV,EAAiB;MACf,kBAAkB,CAChB,IAAI,KAAJ,CAAU,wDAAV,CADgB,CAAlB;MAGA,KAAK,KAAL,GAAa,IAAI,eAAJ,EAAb;IACD;;IAED,KAAK,oBAAL,GACE,CAAA,EAAA,GAAA,MAAM,CAAC,mBAAP,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,EAA1B,GAA8B,IAAI,eAAJ,EADhC;IAEA,KAAK,uBAAL,GACE,CAAA,EAAA,GAAA,MAAM,CAAC,sBAAP,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,EAA7B,GAAiC,IAAI,gBAAJ,EADnC;IAEA,KAAK,mBAAL,GACE,CAAA,EAAA,GAAA,MAAM,CAAC,kBAAP,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,EAAzB,GAA6B,IAAI,eAAJ,EAD/B;IAEA,KAAK,sBAAL,GACE,CAAA,EAAA,GAAA,MAAM,CAAC,qBAAP,MAA4B,IAA5B,IAA4B,EAAA,KAAA,KAAA,CAA5B,GAA4B,EAA5B,GAAgC,IAAI,gBAAJ,EADlC;EAED;;EAED,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UACE,OADF,EAEE,OAFF,EAGE,QAHF,EAIE,QAJF,EAKE,UALF,EAME,KANF,EAMe;IAEb,IAAM,aAAa,GAAG,KAAK,CAAC,cAAN,CAAqB,OAArB,CAAtB;;IAEA,IAAI,CAAC,aAAD,IAAkB,CAAC,kBAAkB,CAAC,aAAD,CAAzC,EAA0D;MACxD,OAAO,KAAK,KAAL,CAAW,YAAX,CACL,OADK,EAEL,OAFK,EAGL,QAHK,EAIL,QAJK,EAKL,UALK,EAML,KANK,CAAP;IAQD;;IAED,IAAI,aAAa,CAAC,QAAlB,EAA4B;MAC1B,IAAI,aAAa,CAAC,UAAd,GAA2B,UAAU,CAAC,OAA1C,EAAmD;QACjD,OAAO,KAAK,oBAAL,CAA0B,YAA1B,CACL,OADK,EAEL,OAFK,EAGL,QAHK,EAIL,QAJK,EAKL,UALK,EAML,KANK,CAAP;MAQD;;MACD,OAAO,KAAK,uBAAL,CAA6B,YAA7B,CACL,OADK,EAEL,OAFK,EAGL,QAHK,EAIL,QAJK,EAKL,UALK,EAML,KANK,CAAP;IAQD;;IAED,IAAI,aAAa,CAAC,UAAd,GAA2B,UAAU,CAAC,OAA1C,EAAmD;MACjD,OAAO,KAAK,mBAAL,CAAyB,YAAzB,CACL,OADK,EAEL,OAFK,EAGL,QAHK,EAIL,QAJK,EAKL,UALK,EAML,KANK,CAAP;IAQD;;IAED,OAAO,KAAK,sBAAL,CAA4B,YAA5B,CACL,OADK,EAEL,OAFK,EAGL,QAHK,EAIL,QAJK,EAKL,UALK,EAML,KANK,CAAP;EAQD,CA7DD;;EA+DA,kBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE,OAAO,sBAAoB,KAAK,KAAL,CAAW,QAAX,EAApB,GAAyC,wBAAzC,GAAkE,KAAK,oBAAL,CAA0B,QAA1B,EAAlE,GAAsG,2BAAtG,GAAkI,KAAK,uBAAL,CAA6B,QAA7B,EAAlI,GAAyK,uBAAzK,GAAiM,KAAK,mBAAL,CAAyB,QAAzB,EAAjM,GAAoO,0BAApO,GAA+P,KAAK,sBAAL,CAA4B,QAA5B,EAA/P,GAAqS,GAA5S;EACD,CAFD;;EAGF,OAAA,kBAAA;AAAC,CA7FD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace, } from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = trace.getSpanContext(context);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\nexport { ParentBasedSampler };\n//# sourceMappingURL=ParentBasedSampler.js.map"]},"metadata":{},"sourceType":"module"}