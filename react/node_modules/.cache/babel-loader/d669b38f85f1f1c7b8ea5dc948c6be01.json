{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\n\nvar NonRecordingSpan =\n/** @class */\nfunction () {\n  function NonRecordingSpan(_spanContext) {\n    if (_spanContext === void 0) {\n      _spanContext = INVALID_SPAN_CONTEXT;\n    }\n\n    this._spanContext = _spanContext;\n  } // Returns a SpanContext.\n\n\n  NonRecordingSpan.prototype.spanContext = function () {\n    return this._spanContext;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.setStatus = function (_status) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.updateName = function (_name) {\n    return this;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.end = function (_endTime) {}; // isRecording always returns false for NonRecordingSpan.\n\n\n  NonRecordingSpan.prototype.isRecording = function () {\n    return false;\n  }; // By default does nothing\n\n\n  NonRecordingSpan.prototype.recordException = function (_exception, _time) {};\n\n  return NonRecordingSpan;\n}();\n\nexport { NonRecordingSpan };","map":{"version":3,"sources":["../../../src/trace/NonRecordingSpan.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAKH,SAAS,oBAAT,QAAqC,0BAArC;AAKA;;;;AAIG;;AACH,IAAA,gBAAA;AAAA;AAAA,YAAA;EACE,SAAA,gBAAA,CACmB,YADnB,EACmE;IAAhD,IAAA,YAAA,KAAA,KAAA,CAAA,EAAA;MAAA,YAAA,GAAA,oBAAA;IAAgD;;IAAhD,KAAA,YAAA,GAAA,YAAA;EACf,CAHN,CAKE;;;EACA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;IACE,OAAO,KAAK,YAAZ;EACD,CAFD,CANF,CAUE;;;EACA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAA2B,MAA3B,EAA0C;IACxC,OAAO,IAAP;EACD,CAFD,CAXF,CAeE;;;EACA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,WAAd,EAAyC;IACvC,OAAO,IAAP;EACD,CAFD,CAhBF,CAoBE;;;EACA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAwB,WAAxB,EAAoD;IAClD,OAAO,IAAP;EACD,CAFD,CArBF,CAyBE;;;EACA,gBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,OAAV,EAA6B;IAC3B,OAAO,IAAP;EACD,CAFD,CA1BF,CA8BE;;;EACA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,KAAX,EAAwB;IACtB,OAAO,IAAP;EACD,CAFD,CA/BF,CAmCE;;;EACA,gBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,QAAJ,EAAwB,CAAU,CAAlC,CApCF,CAsCE;;;EACA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;IACE,OAAO,KAAP;EACD,CAFD,CAvCF,CA2CE;;;EACA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,UAAhB,EAAuC,KAAvC,EAAwD,CAAU,CAAlE;;EACF,OAAA,gBAAA;AAAC,CA7CD,EAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}