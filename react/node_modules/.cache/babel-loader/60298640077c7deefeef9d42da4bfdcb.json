{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\n\nexport function _makeCompatibilityCheck(ownVersion) {\n  var acceptedVersions = new Set([ownVersion]);\n  var rejectedVersions = new Set();\n  var myVersionMatch = ownVersion.match(re);\n\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return function () {\n      return false;\n    };\n  }\n\n  var ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4]\n  }; // if ownVersion has a prerelease tag, versions must match exactly\n\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion) {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion) {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    var globalVersionMatch = globalVersion.match(re);\n\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    var globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4]\n    }; // if globalVersion has a prerelease tag, versions must match exactly\n\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    } // major versions must match\n\n\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\n\nexport var isCompatible = _makeCompatibilityCheck(VERSION);","map":{"version":3,"sources":["../../../src/internal/semver.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}