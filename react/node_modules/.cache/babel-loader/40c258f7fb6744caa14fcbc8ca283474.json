{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as api from '@opentelemetry/api-metrics';\nimport { hashLabels } from './Utils';\n/** This is a SDK implementation of {@link Metric} interface. */\n\nvar Metric =\n/** @class */\nfunction () {\n  function Metric(_name, _options, _kind, resource, instrumentationLibrary) {\n    this._name = _name;\n    this._options = _options;\n    this._kind = _kind;\n    this.resource = resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n    this._instruments = new Map();\n    this._disabled = !!_options.disabled;\n    this._valueType = typeof _options.valueType === 'number' ? _options.valueType : api.ValueType.DOUBLE;\n    this._boundaries = _options.boundaries;\n    this._descriptor = this._getMetricDescriptor();\n    this._aggregationTemporality = _options.aggregationTemporality === undefined ? api.AggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE : _options.aggregationTemporality;\n  }\n  /**\n   * Returns an Instrument associated with specified Labels.\n   * It is recommended to keep a reference to the Instrument instead of always\n   * calling this method for each operation.\n   * @param labels key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n\n\n  Metric.prototype.bind = function (labels) {\n    var hash = hashLabels(labels); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    if (this._instruments.has(hash)) return this._instruments.get(hash);\n\n    var instrument = this._makeInstrument(labels);\n\n    this._instruments.set(hash, instrument);\n\n    return instrument;\n  };\n  /**\n   * Removes the Instrument from the metric, if it is present.\n   * @param labels key-values pairs that are associated with a specific metric.\n   */\n\n\n  Metric.prototype.unbind = function (labels) {\n    this._instruments.delete(hashLabels(labels));\n  };\n  /**\n   * Clears all Instruments from the Metric.\n   */\n\n\n  Metric.prototype.clear = function () {\n    this._instruments.clear();\n  };\n  /**\n   * Returns kind of metric\n   */\n\n\n  Metric.prototype.getKind = function () {\n    return this._kind;\n  };\n\n  Metric.prototype.getAggregationTemporality = function () {\n    return this._aggregationTemporality;\n  };\n\n  Metric.prototype.getMetricRecord = function () {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      resolve(Array.from(_this._instruments.values()).map(function (instrument) {\n        return {\n          descriptor: _this._descriptor,\n          labels: instrument.getLabels(),\n          aggregator: instrument.getAggregator(),\n          aggregationTemporality: _this.getAggregationTemporality(),\n          resource: _this.resource,\n          instrumentationLibrary: _this.instrumentationLibrary\n        };\n      }));\n    });\n  };\n\n  Metric.prototype._getMetricDescriptor = function () {\n    return __assign({\n      name: this._name,\n      description: this._options.description || '',\n      unit: this._options.unit || '1',\n      metricKind: this._kind,\n      valueType: this._valueType\n    }, this._boundaries && {\n      boundaries: this._boundaries\n    });\n  };\n\n  return Metric;\n}();\n\nexport { Metric };","map":{"version":3,"sources":["../../src/Metric.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api-metrics';\nimport { hashLabels } from './Utils';\n/** This is a SDK implementation of {@link Metric} interface. */\nvar Metric = /** @class */ (function () {\n    function Metric(_name, _options, _kind, resource, instrumentationLibrary) {\n        this._name = _name;\n        this._options = _options;\n        this._kind = _kind;\n        this.resource = resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n        this._instruments = new Map();\n        this._disabled = !!_options.disabled;\n        this._valueType =\n            typeof _options.valueType === 'number'\n                ? _options.valueType\n                : api.ValueType.DOUBLE;\n        this._boundaries = _options.boundaries;\n        this._descriptor = this._getMetricDescriptor();\n        this._aggregationTemporality =\n            _options.aggregationTemporality === undefined\n                ? api.AggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE\n                : _options.aggregationTemporality;\n    }\n    /**\n     * Returns an Instrument associated with specified Labels.\n     * It is recommended to keep a reference to the Instrument instead of always\n     * calling this method for each operation.\n     * @param labels key-values pairs that are associated with a specific metric\n     *     that you want to record.\n     */\n    Metric.prototype.bind = function (labels) {\n        var hash = hashLabels(labels);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        if (this._instruments.has(hash))\n            return this._instruments.get(hash);\n        var instrument = this._makeInstrument(labels);\n        this._instruments.set(hash, instrument);\n        return instrument;\n    };\n    /**\n     * Removes the Instrument from the metric, if it is present.\n     * @param labels key-values pairs that are associated with a specific metric.\n     */\n    Metric.prototype.unbind = function (labels) {\n        this._instruments.delete(hashLabels(labels));\n    };\n    /**\n     * Clears all Instruments from the Metric.\n     */\n    Metric.prototype.clear = function () {\n        this._instruments.clear();\n    };\n    /**\n     * Returns kind of metric\n     */\n    Metric.prototype.getKind = function () {\n        return this._kind;\n    };\n    Metric.prototype.getAggregationTemporality = function () {\n        return this._aggregationTemporality;\n    };\n    Metric.prototype.getMetricRecord = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            resolve(Array.from(_this._instruments.values()).map(function (instrument) { return ({\n                descriptor: _this._descriptor,\n                labels: instrument.getLabels(),\n                aggregator: instrument.getAggregator(),\n                aggregationTemporality: _this.getAggregationTemporality(),\n                resource: _this.resource,\n                instrumentationLibrary: _this.instrumentationLibrary,\n            }); }));\n        });\n    };\n    Metric.prototype._getMetricDescriptor = function () {\n        return __assign({ name: this._name, description: this._options.description || '', unit: this._options.unit || '1', metricKind: this._kind, valueType: this._valueType }, (this._boundaries && { boundaries: this._boundaries }));\n    };\n    return Metric;\n}());\nexport { Metric };\n//# sourceMappingURL=Metric.js.map"]},"metadata":{},"sourceType":"module"}