{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { MetricKind } from './export/types';\n/** This is a SDK implementation of Value Observer Metric. */\n\nvar ValueObserverMetric =\n/** @class */\nfunction (_super) {\n  __extends(ValueObserverMetric, _super);\n\n  function ValueObserverMetric(name, options, processor, resource, instrumentationLibrary, callback) {\n    return _super.call(this, name, options, processor, resource, MetricKind.VALUE_OBSERVER, instrumentationLibrary, callback) || this;\n  }\n\n  return ValueObserverMetric;\n}(BaseObserverMetric);\n\nexport { ValueObserverMetric };","map":{"version":3,"sources":["../../src/ValueObserverMetric.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAS,kBAAT,QAAmC,sBAAnC;AAEA,SAAS,UAAT,QAA2B,gBAA3B;AAEA;;AACA,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EACU,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;EAER,SAAA,mBAAA,CACE,IADF,EAEE,OAFF,EAGE,SAHF,EAIE,QAJF,EAKE,sBALF,EAME,QANF,EAM4D;WAE1D,MAAA,CAAA,IAAA,CAAA,IAAA,EACE,IADF,EAEE,OAFF,EAGE,SAHF,EAIE,QAJF,EAKE,UAAU,CAAC,cALb,EAME,sBANF,EAOE,QAPF,KAQC,I;EACF;;EACH,OAAA,mBAAA;AAAC,CArBD,CACU,kBADV,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseObserverMetric } from './BaseObserverMetric';\nimport { MetricKind } from './export/types';\n/** This is a SDK implementation of Value Observer Metric. */\nvar ValueObserverMetric = /** @class */ (function (_super) {\n    __extends(ValueObserverMetric, _super);\n    function ValueObserverMetric(name, options, processor, resource, instrumentationLibrary, callback) {\n        return _super.call(this, name, options, processor, resource, MetricKind.VALUE_OBSERVER, instrumentationLibrary, callback) || this;\n    }\n    return ValueObserverMetric;\n}(BaseObserverMetric));\nexport { ValueObserverMetric };\n//# sourceMappingURL=ValueObserverMetric.js.map"]},"metadata":{},"sourceType":"module"}