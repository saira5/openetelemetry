{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\nvar context = ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\n\nvar NoopTracer =\n/** @class */\nfunction () {\n  function NoopTracer() {} // startSpan starts a noop span.\n\n\n  NoopTracer.prototype.startSpan = function (name, options, context) {\n    var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    var parentFromContext = context && getSpanContext(context);\n\n    if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  };\n\n  NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n    var opts;\n    var ctx;\n    var fn;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n\n    var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();\n    var span = this.startSpan(name, opts, parentContext);\n    var contextWithSpanSet = setSpan(parentContext, span);\n    return context.with(contextWithSpanSet, fn, undefined, span);\n  };\n\n  return NoopTracer;\n}();\n\nexport { NoopTracer };\n\nfunction isSpanContext(spanContext) {\n  return typeof spanContext === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';\n}","map":{"version":3,"sources":["../../../src/trace/NoopTracer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,UAAT,QAA2B,gBAA3B;AAEA,SAAS,cAAT,EAAyB,OAAzB,QAAwC,wBAAxC;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA,SAAS,kBAAT,QAAmC,qBAAnC;AAKA,IAAM,OAAO,GAAG,UAAU,CAAC,WAAX,EAAhB;AAEA;;AAEG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;EAAA,SAAA,UAAA,GAAA,CAgEC,CAhED,CACE;;;EACA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAA+C,OAA/C,EAAgE;IAC9D,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,IAAV,CAApB;;IACA,IAAI,IAAJ,EAAU;MACR,OAAO,IAAI,gBAAJ,EAAP;IACD;;IAED,IAAM,iBAAiB,GAAG,OAAO,IAAI,cAAc,CAAC,OAAD,CAAnD;;IAEA,IACE,aAAa,CAAC,iBAAD,CAAb,IACA,kBAAkB,CAAC,iBAAD,CAFpB,EAGE;MACA,OAAO,IAAI,gBAAJ,CAAqB,iBAArB,CAAP;IACD,CALD,MAKO;MACL,OAAO,IAAI,gBAAJ,EAAP;IACD;EACF,CAhBD;;EAiCA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UACE,IADF,EAEE,IAFF,EAGE,IAHF,EAIE,IAJF,EAIU;IAER,IAAI,IAAJ;IACA,IAAI,GAAJ;IACA,IAAI,EAAJ;;IAEA,IAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;MACxB;IACD,CAFD,MAEO,IAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;MACjC,EAAE,GAAG,IAAL;IACD,CAFM,MAEA,IAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;MACjC,IAAI,GAAG,IAAP;MACA,EAAE,GAAG,IAAL;IACD,CAHM,MAGA;MACL,IAAI,GAAG,IAAP;MACA,GAAG,GAAG,IAAN;MACA,EAAE,GAAG,IAAL;IACD;;IAED,IAAM,aAAa,GAAG,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAA,GAAA,GAAO,OAAO,CAAC,MAAR,EAA7B;IACA,IAAM,IAAI,GAAG,KAAK,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,aAA3B,CAAb;IACA,IAAM,kBAAkB,GAAG,OAAO,CAAC,aAAD,EAAgB,IAAhB,CAAlC;IAEA,OAAO,OAAO,CAAC,IAAR,CAAa,kBAAb,EAAiC,EAAjC,EAAqC,SAArC,EAAgD,IAAhD,CAAP;EACD,CA5BD;;EA6BF,OAAA,UAAA;AAAC,CAhED,EAAA;;;;AAkEA,SAAS,aAAT,CAAuB,WAAvB,EAAuC;EACrC,OACE,OAAO,WAAP,KAAuB,QAAvB,IACA,OAAO,WAAW,CAAC,QAAD,CAAlB,KAAiC,QADjC,IAEA,OAAO,WAAW,CAAC,SAAD,CAAlB,KAAkC,QAFlC,IAGA,OAAO,WAAW,CAAC,YAAD,CAAlB,KAAqC,QAJvC;AAMD","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst context = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return context.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}