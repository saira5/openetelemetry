{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BoundUpDownCounter } from './BoundInstrument';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n/** This is a SDK implementation of UpDownCounter Metric. */\n\nvar UpDownCounterMetric =\n/** @class */\nfunction (_super) {\n  __extends(UpDownCounterMetric, _super);\n\n  function UpDownCounterMetric(name, options, _processor, resource, instrumentationLibrary) {\n    var _this = _super.call(this, name, options, MetricKind.UP_DOWN_COUNTER, resource, instrumentationLibrary) || this;\n\n    _this._processor = _processor;\n    return _this;\n  }\n\n  UpDownCounterMetric.prototype._makeInstrument = function (labels) {\n    return new BoundUpDownCounter(labels, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));\n  };\n  /**\n   * Adds the given value to the current value. Values cannot be negative.\n   * @param value the value to add.\n   * @param [labels = {}] key-values pairs that are associated with a specific\n   *     metric that you want to record.\n   */\n\n\n  UpDownCounterMetric.prototype.add = function (value, labels) {\n    if (labels === void 0) {\n      labels = {};\n    }\n\n    this.bind(labels).add(value);\n  };\n\n  return UpDownCounterMetric;\n}(Metric);\n\nexport { UpDownCounterMetric };","map":{"version":3,"sources":["../../src/UpDownCounterMetric.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKH,SAAS,kBAAT,QAAmC,mBAAnC;AACA,SAAS,UAAT,QAA2B,gBAA3B;AAEA,SAAS,MAAT,QAAuB,UAAvB;AAEA;;AACA,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EACU,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;EAER,SAAA,mBAAA,CACE,IADF,EAEE,OAFF,EAGmB,UAHnB,EAIE,QAJF,EAKE,sBALF,EAKgD;IALhD,IAAA,KAAA,GAOE,MAAA,CAAA,IAAA,CAAA,IAAA,EACE,IADF,EAEE,OAFF,EAGE,UAAU,CAAC,eAHb,EAIE,QAJF,EAKE,sBALF,KAMC,IAbH;;IAGmB,KAAA,CAAA,UAAA,GAAA,UAAA;;EAWlB;;EACS,mBAAA,CAAA,SAAA,CAAA,eAAA,GAAV,UAA0B,MAA1B,EAA4C;IAC1C,OAAO,IAAI,kBAAJ,CACL,MADK,EAEL,KAAK,SAFA,EAGL,KAAK,UAHA,EAIL,KAAK,UAAL,CAAgB,aAAhB,CAA8B,KAAK,WAAnC,CAJK,CAAP;EAMD,CAPS;EASV;;;;;AAKG;;;EACH,mBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,KAAJ,EAAmB,MAAnB,EAA0C;IAAvB,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,EAAA;IAAuB;;IACxC,KAAK,IAAL,CAAU,MAAV,EAAkB,GAAlB,CAAsB,KAAtB;EACD,CAFD;;EAGF,OAAA,mBAAA;AAAC,CApCD,CACU,MADV,CAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BoundUpDownCounter } from './BoundInstrument';\nimport { MetricKind } from './export/types';\nimport { Metric } from './Metric';\n/** This is a SDK implementation of UpDownCounter Metric. */\nvar UpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(UpDownCounterMetric, _super);\n    function UpDownCounterMetric(name, options, _processor, resource, instrumentationLibrary) {\n        var _this = _super.call(this, name, options, MetricKind.UP_DOWN_COUNTER, resource, instrumentationLibrary) || this;\n        _this._processor = _processor;\n        return _this;\n    }\n    UpDownCounterMetric.prototype._makeInstrument = function (labels) {\n        return new BoundUpDownCounter(labels, this._disabled, this._valueType, this._processor.aggregatorFor(this._descriptor));\n    };\n    /**\n     * Adds the given value to the current value. Values cannot be negative.\n     * @param value the value to add.\n     * @param [labels = {}] key-values pairs that are associated with a specific\n     *     metric that you want to record.\n     */\n    UpDownCounterMetric.prototype.add = function (value, labels) {\n        if (labels === void 0) { labels = {}; }\n        this.bind(labels).add(value);\n    };\n    return UpDownCounterMetric;\n}(Metric));\nexport { UpDownCounterMetric };\n//# sourceMappingURL=UpDownCounterMetric.js.map"]},"metadata":{},"sourceType":"module"}