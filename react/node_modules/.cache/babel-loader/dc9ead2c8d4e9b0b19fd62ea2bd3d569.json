{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\n\nvar ContextAPI =\n/** @class */\nfunction () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function ContextAPI() {}\n  /** Get the singleton instance of the Context API */\n\n\n  ContextAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  };\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n\n\n  ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  };\n  /**\n   * Get the currently active context\n   */\n\n\n  ContextAPI.prototype.active = function () {\n    return this._getContextManager().active();\n  };\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n\n\n  ContextAPI.prototype.with = function (context, fn, thisArg) {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n\n    return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));\n  };\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n\n\n  ContextAPI.prototype.bind = function (context, target) {\n    return this._getContextManager().bind(context, target);\n  };\n\n  ContextAPI.prototype._getContextManager = function () {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  };\n  /** Disable and remove the global context manager */\n\n\n  ContextAPI.prototype.disable = function () {\n    this._getContextManager().disable();\n\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  };\n\n  return ContextAPI;\n}();\n\nexport { ContextAPI };","map":{"version":3,"sources":["../../../src/api/context.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;AAEH,SAAS,kBAAT,QAAmC,+BAAnC;AAEA,SACE,SADF,EAEE,cAFF,EAGE,gBAHF,QAIO,0BAJP;AAKA,SAAS,OAAT,QAAwB,QAAxB;AAEA,IAAM,QAAQ,GAAG,SAAjB;AACA,IAAM,oBAAoB,GAAG,IAAI,kBAAJ,EAA7B;AAEA;;AAEG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;EAGE;EACA,SAAA,UAAA,GAAA,CAAwB;EAExB;;;EACc,UAAA,CAAA,WAAA,GAAd,YAAA;IACE,IAAI,CAAC,KAAK,SAAV,EAAqB;MACnB,KAAK,SAAL,GAAiB,IAAI,UAAJ,EAAjB;IACD;;IAED,OAAO,KAAK,SAAZ;EACD,CANa;EAQd;;;;AAIG;;;EACI,UAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,cAA/B,EAA6D;IAC3D,OAAO,cAAc,CAAC,QAAD,EAAW,cAAX,EAA2B,OAAO,CAAC,QAAR,EAA3B,CAArB;EACD,CAFM;EAIP;;AAEG;;;EACI,UAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;IACE,OAAO,KAAK,kBAAL,GAA0B,MAA1B,EAAP;EACD,CAFM;EAIP;;;;;;;AAOG;;;EACI,UAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UACE,OADF,EAEE,EAFF,EAGE,OAHF,EAGgC;;;IAC9B,IAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAU;MAAV,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;IAEA,OAAO,CAAA,EAAA,GAAA,KAAK,kBAAL,EAAA,EAA0B,IAA1B,CAA8B,KAA9B,CAA8B,EAA9B,EAA8B,aAAA,CAAA,CAAC,OAAD,EAAU,EAAV,EAAc,OAAd,CAAA,EAA0B,IAA1B,CAA9B,CAAP;EACD,CAPM;EASP;;;;;AAKG;;;EACI,UAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAe,OAAf,EAAiC,MAAjC,EAA0C;IACxC,OAAO,KAAK,kBAAL,GAA0B,IAA1B,CAA+B,OAA/B,EAAwC,MAAxC,CAAP;EACD,CAFM;;EAIC,UAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,YAAA;IACE,OAAO,SAAS,CAAC,QAAD,CAAT,IAAuB,oBAA9B;EACD,CAFO;EAIR;;;EACO,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;IACE,KAAK,kBAAL,GAA0B,OAA1B;;IACA,gBAAgB,CAAC,QAAD,EAAW,OAAO,CAAC,QAAR,EAAX,CAAhB;EACD,CAHM;;EAIT,OAAA,UAAA;AAAC,CAnED,EAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}