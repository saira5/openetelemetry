{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\n\nvar StackContextManager =\n/** @class */\nfunction () {\n  function StackContextManager() {\n    /**\n     * whether the context manager is enabled or not\n     */\n    this._enabled = false;\n    /**\n     * Keeps the reference to current context\n     */\n\n    this._currentContext = ROOT_CONTEXT;\n  }\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n\n\n  StackContextManager.prototype._bindFunction = function (context, target) {\n    if (context === void 0) {\n      context = ROOT_CONTEXT;\n    }\n\n    var manager = this;\n\n    var contextWrapper = function contextWrapper() {\n      var _this = this;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return manager.with(context, function () {\n        return target.apply(_this, args);\n      });\n    };\n\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length\n    });\n    return contextWrapper;\n  };\n  /**\n   * Returns the active context\n   */\n\n\n  StackContextManager.prototype.active = function () {\n    return this._currentContext;\n  };\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n\n\n  StackContextManager.prototype.bind = function (context, target) {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n\n    return target;\n  };\n  /**\n   * Disable the context manager (clears the current context)\n   */\n\n\n  StackContextManager.prototype.disable = function () {\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  };\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n\n\n  StackContextManager.prototype.enable = function () {\n    if (this._enabled) {\n      return this;\n    }\n\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  };\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n\n\n  StackContextManager.prototype.with = function (context, fn, thisArg) {\n    var args = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n\n    var previousContext = this._currentContext;\n    this._currentContext = context || ROOT_CONTEXT;\n\n    try {\n      return fn.call.apply(fn, __spreadArray([thisArg], args));\n    } finally {\n      this._currentContext = previousContext;\n    }\n  };\n\n  return StackContextManager;\n}();\n\nexport { StackContextManager };","map":{"version":3,"sources":["../../src/StackContextManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nvar StackContextManager = /** @class */ (function () {\n    function StackContextManager() {\n        /**\n         * whether the context manager is enabled or not\n         */\n        this._enabled = false;\n        /**\n         * Keeps the reference to current context\n         */\n        this._currentContext = ROOT_CONTEXT;\n    }\n    /**\n     *\n     * @param context\n     * @param target Function to be executed within the context\n     */\n    StackContextManager.prototype._bindFunction = function (context, target) {\n        if (context === void 0) { context = ROOT_CONTEXT; }\n        var manager = this;\n        var contextWrapper = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.with(context, function () { return target.apply(_this, args); });\n        };\n        Object.defineProperty(contextWrapper, 'length', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: target.length,\n        });\n        return contextWrapper;\n    };\n    /**\n     * Returns the active context\n     */\n    StackContextManager.prototype.active = function () {\n        return this._currentContext;\n    };\n    /**\n     * Binds a the certain context or the active one to the target function and then returns the target\n     * @param context A context (span) to be bind to target\n     * @param target a function or event emitter. When target or one of its callbacks is called,\n     *  the provided context will be used as the active context for the duration of the call.\n     */\n    StackContextManager.prototype.bind = function (context, target) {\n        // if no specific context to propagate is given, we use the current one\n        if (context === undefined) {\n            context = this.active();\n        }\n        if (typeof target === 'function') {\n            return this._bindFunction(context, target);\n        }\n        return target;\n    };\n    /**\n     * Disable the context manager (clears the current context)\n     */\n    StackContextManager.prototype.disable = function () {\n        this._currentContext = ROOT_CONTEXT;\n        this._enabled = false;\n        return this;\n    };\n    /**\n     * Enables the context manager and creates a default(root) context\n     */\n    StackContextManager.prototype.enable = function () {\n        if (this._enabled) {\n            return this;\n        }\n        this._enabled = true;\n        this._currentContext = ROOT_CONTEXT;\n        return this;\n    };\n    /**\n     * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n     * The context will be set as active\n     * @param context\n     * @param fn Callback function\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    StackContextManager.prototype.with = function (context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        var previousContext = this._currentContext;\n        this._currentContext = context || ROOT_CONTEXT;\n        try {\n            return fn.call.apply(fn, __spreadArray([thisArg], args));\n        }\n        finally {\n            this._currentContext = previousContext;\n        }\n    };\n    return StackContextManager;\n}());\nexport { StackContextManager };\n//# sourceMappingURL=StackContextManager.js.map"]},"metadata":{},"sourceType":"module"}