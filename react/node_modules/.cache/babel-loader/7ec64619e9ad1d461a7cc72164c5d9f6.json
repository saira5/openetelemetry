{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as api from '@opentelemetry/api';\nimport { isWrapped } from '@opentelemetry/core';\nimport * as shimmer from 'shimmer';\nimport { AttributeNames } from './enums/AttributeNames';\nimport * as React from 'react';\nimport { VERSION } from './version';\n/**\n * This class is the base component for a React component with lifecycle instrumentation\n */\n\nvar BaseOpenTelemetryComponent =\n/** @class */\nfunction (_super) {\n  __extends(BaseOpenTelemetryComponent, _super);\n  /**\n   * @param props Props of the React component\n   */\n\n\n  function BaseOpenTelemetryComponent(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.component = 'react-load';\n    _this.moduleName = _this.component;\n    _this._parentSpanMap = new WeakMap();\n\n    _this.patch();\n\n    return _this;\n  }\n  /**\n   * Sets the tracer for all components being instrumented\n   * @param name Name of tracer\n   * @param version Version of tracer, this is optional. When not provided it will use the latest.\n   */\n\n\n  BaseOpenTelemetryComponent.setTracer = function (name, version) {\n    BaseOpenTelemetryComponent._tracer = api.trace.getTracer(name, version ? version : VERSION);\n  };\n  /**\n   * Sets the logger for all components being instrumented\n   * @param logger\n   */\n\n\n  BaseOpenTelemetryComponent.setLogger = function (logger) {\n    api.diag.setLogger(logger);\n    BaseOpenTelemetryComponent._logger = logger;\n  };\n  /**\n   * Creates a new span as a child of the current parent span.\n   * If parent span is undefined, just the child is created.\n   * @param react React component currently being instrumented\n   * @param name Name of span\n   * @param parentSpan parent span\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._createSpanWithParent = function (react, name, parentSpan) {\n    return BaseOpenTelemetryComponent._tracer.startSpan(name, {\n      attributes: this._getAttributes(react)\n    }, parentSpan ? api.trace.setSpan(api.context.active(), parentSpan) : undefined);\n  };\n  /**\n   * Creates a new span\n   * @param react React component currently being instrumented\n   * @param name Name of span\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._createSpan = function (react, name) {\n    return BaseOpenTelemetryComponent._tracer.startSpan(name, {\n      attributes: this._getAttributes(react)\n    });\n  };\n  /**\n   * Provides instrumentation for a function\n   * @param react React component currently instrumenting.\n   * @param spanName Name to set the span of the instrumented function to.\n   * @param original Original function currently being wrapped.\n   * @parentName Name to set parent span to on error.\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._instrumentFunction = function (react, spanName, parent, original) {\n    var span = this._createSpanWithParent(react, spanName, parent);\n\n    var wasError = false;\n\n    try {\n      return api.context.with(api.trace.setSpan(api.context.active(), span), function () {\n        return original();\n      });\n    } catch (err) {\n      span.setAttribute(AttributeNames.REACT_ERROR, err.stack);\n      wasError = true;\n      throw err;\n    } finally {\n      span.end();\n\n      if (wasError) {\n        this._endParentSpan(react);\n      }\n    }\n  };\n  /**\n   * Ends the current parent span.\n   * @param react React component parent span belongs to.\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._endParentSpan = function (react) {\n    var parentSpan = this._parentSpanMap.get(react);\n\n    if (parentSpan) {\n      parentSpan.end();\n\n      this._parentSpanMap.delete(react);\n    }\n  };\n  /**\n   * Returns attributes object for spans\n   * @param react React component currently being instrumented\n   **/\n\n\n  BaseOpenTelemetryComponent.prototype._getAttributes = function (react) {\n    var _a;\n\n    var state;\n\n    try {\n      state = JSON.stringify(react.state);\n    } catch (_b) {\n      state = '{\"message\": \"state could not be turned into string\"}';\n    }\n\n    return _a = {}, _a[AttributeNames.LOCATION_URL] = window.location.href, _a[AttributeNames.REACT_NAME] = react.constructor.name, _a[AttributeNames.REACT_STATE] = state, _a;\n  };\n  /**\n   * This function returns a parent span. If the parent doesn't\n   * exist, the function creates one\n   * @param react React component parent span belongs to.\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._getParentSpan = function (react, parentName) {\n    var parentSpan = this._parentSpanMap.get(react);\n\n    if (!parentSpan) {\n      var span = this._createSpan(react, parentName);\n\n      this._parentSpanMap.set(react, span);\n    }\n\n    return this._parentSpanMap.get(react);\n  };\n  /**\n   * Patches the render lifecycle method\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._patchRender = function () {\n    var _this = this;\n\n    return function (original) {\n      var plugin = _this;\n      return function patchRender() {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        } // Render is the first method in the mounting flow, if a parent span wasn't created already then we're in the mounting flow\n\n\n        var parentSpan;\n\n        if (!plugin._parentSpanMap.get(this)) {\n          parentSpan = plugin._getParentSpan(this, AttributeNames.MOUNTING_SPAN);\n        } else {\n          parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n        }\n\n        return plugin._instrumentFunction(this, 'render', parentSpan, function () {\n          return original.apply(_this, args);\n        });\n      };\n    };\n  };\n  /**\n   * Patches the componentDidMount lifecycle method\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._patchComponentDidMount = function () {\n    var _this = this;\n\n    return function (original) {\n      var plugin = _this;\n      return function patchComponentDidMount() {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var parentSpan = plugin._getParentSpan(this, AttributeNames.MOUNTING_SPAN);\n\n        var apply = plugin._instrumentFunction(this, 'componentDidMount', parentSpan, function () {\n          return original.apply(_this, args);\n        });\n\n        plugin._endParentSpan(this);\n\n        return apply;\n      };\n    };\n  };\n  /**\n   * Patches the setState function\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._patchSetState = function () {\n    var _this = this;\n\n    return function (original) {\n      var plugin = _this;\n      return function patchSetState() {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n\n        return plugin._instrumentFunction(this, 'setState()', parentSpan, function () {\n          return original.apply(_this, args);\n        });\n      };\n    };\n  };\n  /**\n   * Patches the forceUpdate function\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._patchForceUpdate = function () {\n    var _this = this;\n\n    return function (original) {\n      var plugin = _this;\n      return function patchForceUpdate() {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n\n        return plugin._instrumentFunction(this, 'forceUpdate()', parentSpan, function () {\n          return original.apply(_this, args);\n        });\n      };\n    };\n  };\n  /**\n   * Patches the shouldComponentUpdate lifecycle method\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._patchShouldComponentUpdate = function () {\n    var _this = this;\n\n    return function (original) {\n      var plugin = _this;\n      return function patchShouldComponentUpdate() {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n\n        var apply = plugin._instrumentFunction(this, 'shouldComponentUpdate', parentSpan, function () {\n          return original.apply(_this, args);\n        }); // if shouldComponentUpdate returns false, the component does not get\n        // updated and no other lifecycle methods get called\n\n\n        if (!apply) {\n          plugin._endParentSpan(this);\n        }\n\n        return apply;\n      };\n    };\n  };\n  /**\n   * Patches the shouldComponentUpdate lifecycle method\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._patchGetSnapshotBeforeUpdate = function () {\n    var _this = this;\n\n    return function (original) {\n      var plugin = _this;\n      return function patchGetSnapshotBeforeUpdate() {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n\n        return plugin._instrumentFunction(this, 'getSnapshotBeforeUpdate', parentSpan, function () {\n          return original.apply(_this, args);\n        });\n      };\n    };\n  };\n  /**\n   * Patches the componentDidUpdate lifecycle method\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._patchComponentDidUpdate = function () {\n    var _this = this;\n\n    return function (original) {\n      var plugin = _this;\n      return function patchComponentDidUpdate() {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n\n        var apply = plugin._instrumentFunction(this, 'componentDidUpdate', parentSpan, function () {\n          return original.apply(_this, args);\n        });\n\n        plugin._endParentSpan(this);\n\n        return apply;\n      };\n    };\n  };\n  /**\n   * Patches the componentWillUnmount lifecycle method\n   */\n\n\n  BaseOpenTelemetryComponent.prototype._patchComponentWillUnmount = function () {\n    var _this = this;\n\n    return function (original) {\n      var plugin = _this;\n      return function patchComponentWillUnmount() {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var parentSpan = plugin._getParentSpan(this, AttributeNames.UNMOUNTING_SPAN);\n\n        var apply = plugin._instrumentFunction(this, 'componentWillUnmount', parentSpan, function () {\n          return original.apply(_this, args);\n        });\n\n        plugin._endParentSpan(this);\n\n        return apply;\n      };\n    };\n  };\n  /**\n   * patch function which wraps all the lifecycle methods\n   */\n\n\n  BaseOpenTelemetryComponent.prototype.patch = function () {\n    BaseOpenTelemetryComponent._logger.debug('applying patch to', this.moduleName, VERSION);\n\n    if (isWrapped(this.render)) {\n      shimmer.unwrap(this, 'render');\n\n      BaseOpenTelemetryComponent._logger.warn('removing previous patch from method render');\n    }\n\n    if (isWrapped(this.componentDidMount)) {\n      shimmer.unwrap(this, 'componentDidMount');\n\n      BaseOpenTelemetryComponent._logger.warn('removing previous patch from method componentDidMount');\n    }\n\n    if (isWrapped(this.shouldComponentUpdate)) {\n      shimmer.unwrap(this, 'shouldComponentUpdate');\n\n      BaseOpenTelemetryComponent._logger.warn('removing previous patch from method shouldComponentUpdate');\n    }\n\n    if (isWrapped(this.getSnapshotBeforeUpdate)) {\n      shimmer.unwrap(this, 'getSnapshotBeforeUpdate');\n\n      BaseOpenTelemetryComponent._logger.warn('removing previous patch from method getSnapshotBeforeUpdate');\n    }\n\n    if (isWrapped(this.setState)) {\n      shimmer.unwrap(this, 'setState');\n\n      BaseOpenTelemetryComponent._logger.warn('removing previous patch from method setState');\n    }\n\n    if (isWrapped(this.forceUpdate)) {\n      shimmer.unwrap(this, 'forceUpdate');\n\n      BaseOpenTelemetryComponent._logger.warn('removing previous patch from method forceUpdate');\n    }\n\n    if (isWrapped(this.componentDidUpdate)) {\n      shimmer.unwrap(this, 'componentDidUpdate');\n\n      BaseOpenTelemetryComponent._logger.warn('removing previous patch from method componentDidUpdate');\n    }\n\n    if (isWrapped(this.componentWillUnmount)) {\n      shimmer.unwrap(this, 'componentWillUnmount');\n\n      BaseOpenTelemetryComponent._logger.warn('removing previous patch from method componentWillUnmount');\n    } // Lifecycle methods must exist when patching, even if not defined in component\n\n\n    if (!this.render) {\n      this.render = function () {\n        return null;\n      };\n    }\n\n    if (!this.componentDidMount) {\n      this.componentDidMount = function () {\n        return;\n      };\n    }\n\n    if (!this.shouldComponentUpdate) {\n      this.shouldComponentUpdate = function () {\n        return true;\n      };\n    }\n\n    if (!this.getSnapshotBeforeUpdate) {\n      this.getSnapshotBeforeUpdate = function () {\n        return null;\n      };\n    }\n\n    if (!this.componentDidUpdate) {\n      this.componentDidUpdate = function () {\n        return;\n      };\n    }\n\n    if (!this.componentWillUnmount) {\n      this.componentWillUnmount = function () {\n        return;\n      };\n    }\n\n    shimmer.wrap(this, 'render', this._patchRender());\n    shimmer.wrap(this, 'componentDidMount', this._patchComponentDidMount());\n    shimmer.wrap(this, 'setState', this._patchSetState());\n    shimmer.wrap(this, 'forceUpdate', this._patchForceUpdate());\n    shimmer.wrap(this, 'shouldComponentUpdate', this._patchShouldComponentUpdate());\n    shimmer.wrap(this, 'getSnapshotBeforeUpdate', this._patchGetSnapshotBeforeUpdate());\n    shimmer.wrap(this, 'componentDidUpdate', this._patchComponentDidUpdate());\n    shimmer.wrap(this, 'componentWillUnmount', this._patchComponentWillUnmount());\n  };\n  /**\n   * unpatch function to unwrap all the lifecycle methods\n   */\n\n\n  BaseOpenTelemetryComponent.prototype.unpatch = function () {\n    BaseOpenTelemetryComponent._logger.debug('removing patch from', this.moduleName, VERSION);\n\n    shimmer.unwrap(this, 'render');\n    shimmer.unwrap(this, 'componentDidMount');\n    shimmer.unwrap(this, 'setState');\n    shimmer.unwrap(this, 'forceUpdate');\n    shimmer.unwrap(this, 'shouldComponentUpdate');\n    shimmer.unwrap(this, 'getSnapshotBeforeUpdate');\n    shimmer.unwrap(this, 'componentDidUpdate');\n    shimmer.unwrap(this, 'componentWillUnmount');\n    this._parentSpanMap = new WeakMap();\n  };\n\n  BaseOpenTelemetryComponent._logger = api.diag;\n  return BaseOpenTelemetryComponent;\n}(React.Component);\n\nexport { BaseOpenTelemetryComponent };","map":{"version":3,"sources":["../../src/BaseOpenTelemetryComponent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as api from '@opentelemetry/api';\nimport { isWrapped } from '@opentelemetry/core';\nimport * as shimmer from 'shimmer';\nimport { AttributeNames } from './enums/AttributeNames';\nimport * as React from 'react';\nimport { VERSION } from './version';\n/**\n * This class is the base component for a React component with lifecycle instrumentation\n */\nvar BaseOpenTelemetryComponent = /** @class */ (function (_super) {\n    __extends(BaseOpenTelemetryComponent, _super);\n    /**\n     * @param props Props of the React component\n     */\n    function BaseOpenTelemetryComponent(props) {\n        var _this = _super.call(this, props) || this;\n        _this.component = 'react-load';\n        _this.moduleName = _this.component;\n        _this._parentSpanMap = new WeakMap();\n        _this.patch();\n        return _this;\n    }\n    /**\n     * Sets the tracer for all components being instrumented\n     * @param name Name of tracer\n     * @param version Version of tracer, this is optional. When not provided it will use the latest.\n     */\n    BaseOpenTelemetryComponent.setTracer = function (name, version) {\n        BaseOpenTelemetryComponent._tracer = api.trace.getTracer(name, version ? version : VERSION);\n    };\n    /**\n     * Sets the logger for all components being instrumented\n     * @param logger\n     */\n    BaseOpenTelemetryComponent.setLogger = function (logger) {\n        api.diag.setLogger(logger);\n        BaseOpenTelemetryComponent._logger = logger;\n    };\n    /**\n     * Creates a new span as a child of the current parent span.\n     * If parent span is undefined, just the child is created.\n     * @param react React component currently being instrumented\n     * @param name Name of span\n     * @param parentSpan parent span\n     */\n    BaseOpenTelemetryComponent.prototype._createSpanWithParent = function (react, name, parentSpan) {\n        return BaseOpenTelemetryComponent._tracer.startSpan(name, {\n            attributes: this._getAttributes(react),\n        }, parentSpan\n            ? api.trace.setSpan(api.context.active(), parentSpan)\n            : undefined);\n    };\n    /**\n     * Creates a new span\n     * @param react React component currently being instrumented\n     * @param name Name of span\n     */\n    BaseOpenTelemetryComponent.prototype._createSpan = function (react, name) {\n        return BaseOpenTelemetryComponent._tracer.startSpan(name, {\n            attributes: this._getAttributes(react),\n        });\n    };\n    /**\n     * Provides instrumentation for a function\n     * @param react React component currently instrumenting.\n     * @param spanName Name to set the span of the instrumented function to.\n     * @param original Original function currently being wrapped.\n     * @parentName Name to set parent span to on error.\n     */\n    BaseOpenTelemetryComponent.prototype._instrumentFunction = function (react, spanName, parent, original) {\n        var span = this._createSpanWithParent(react, spanName, parent);\n        var wasError = false;\n        try {\n            return api.context.with(api.trace.setSpan(api.context.active(), span), function () {\n                return original();\n            });\n        }\n        catch (err) {\n            span.setAttribute(AttributeNames.REACT_ERROR, err.stack);\n            wasError = true;\n            throw err;\n        }\n        finally {\n            span.end();\n            if (wasError) {\n                this._endParentSpan(react);\n            }\n        }\n    };\n    /**\n     * Ends the current parent span.\n     * @param react React component parent span belongs to.\n     */\n    BaseOpenTelemetryComponent.prototype._endParentSpan = function (react) {\n        var parentSpan = this._parentSpanMap.get(react);\n        if (parentSpan) {\n            parentSpan.end();\n            this._parentSpanMap.delete(react);\n        }\n    };\n    /**\n     * Returns attributes object for spans\n     * @param react React component currently being instrumented\n     **/\n    BaseOpenTelemetryComponent.prototype._getAttributes = function (react) {\n        var _a;\n        var state;\n        try {\n            state = JSON.stringify(react.state);\n        }\n        catch (_b) {\n            state = '{\"message\": \"state could not be turned into string\"}';\n        }\n        return _a = {},\n            _a[AttributeNames.LOCATION_URL] = window.location.href,\n            _a[AttributeNames.REACT_NAME] = react.constructor.name,\n            _a[AttributeNames.REACT_STATE] = state,\n            _a;\n    };\n    /**\n     * This function returns a parent span. If the parent doesn't\n     * exist, the function creates one\n     * @param react React component parent span belongs to.\n     */\n    BaseOpenTelemetryComponent.prototype._getParentSpan = function (react, parentName) {\n        var parentSpan = this._parentSpanMap.get(react);\n        if (!parentSpan) {\n            var span = this._createSpan(react, parentName);\n            this._parentSpanMap.set(react, span);\n        }\n        return this._parentSpanMap.get(react);\n    };\n    /**\n     * Patches the render lifecycle method\n     */\n    BaseOpenTelemetryComponent.prototype._patchRender = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchRender() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                // Render is the first method in the mounting flow, if a parent span wasn't created already then we're in the mounting flow\n                var parentSpan;\n                if (!plugin._parentSpanMap.get(this)) {\n                    parentSpan = plugin._getParentSpan(this, AttributeNames.MOUNTING_SPAN);\n                }\n                else {\n                    parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n                }\n                return plugin._instrumentFunction(this, 'render', parentSpan, function () {\n                    return original.apply(_this, args);\n                });\n            };\n        };\n    };\n    /**\n     * Patches the componentDidMount lifecycle method\n     */\n    BaseOpenTelemetryComponent.prototype._patchComponentDidMount = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchComponentDidMount() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var parentSpan = plugin._getParentSpan(this, AttributeNames.MOUNTING_SPAN);\n                var apply = plugin._instrumentFunction(this, 'componentDidMount', parentSpan, function () {\n                    return original.apply(_this, args);\n                });\n                plugin._endParentSpan(this);\n                return apply;\n            };\n        };\n    };\n    /**\n     * Patches the setState function\n     */\n    BaseOpenTelemetryComponent.prototype._patchSetState = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchSetState() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n                return plugin._instrumentFunction(this, 'setState()', parentSpan, function () {\n                    return original.apply(_this, args);\n                });\n            };\n        };\n    };\n    /**\n     * Patches the forceUpdate function\n     */\n    BaseOpenTelemetryComponent.prototype._patchForceUpdate = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchForceUpdate() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n                return plugin._instrumentFunction(this, 'forceUpdate()', parentSpan, function () {\n                    return original.apply(_this, args);\n                });\n            };\n        };\n    };\n    /**\n     * Patches the shouldComponentUpdate lifecycle method\n     */\n    BaseOpenTelemetryComponent.prototype._patchShouldComponentUpdate = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchShouldComponentUpdate() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n                var apply = plugin._instrumentFunction(this, 'shouldComponentUpdate', parentSpan, function () {\n                    return original.apply(_this, args);\n                });\n                // if shouldComponentUpdate returns false, the component does not get\n                // updated and no other lifecycle methods get called\n                if (!apply) {\n                    plugin._endParentSpan(this);\n                }\n                return apply;\n            };\n        };\n    };\n    /**\n     * Patches the shouldComponentUpdate lifecycle method\n     */\n    BaseOpenTelemetryComponent.prototype._patchGetSnapshotBeforeUpdate = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchGetSnapshotBeforeUpdate() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n                return plugin._instrumentFunction(this, 'getSnapshotBeforeUpdate', parentSpan, function () {\n                    return original.apply(_this, args);\n                });\n            };\n        };\n    };\n    /**\n     * Patches the componentDidUpdate lifecycle method\n     */\n    BaseOpenTelemetryComponent.prototype._patchComponentDidUpdate = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchComponentDidUpdate() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var parentSpan = plugin._getParentSpan(this, AttributeNames.UPDATING_SPAN);\n                var apply = plugin._instrumentFunction(this, 'componentDidUpdate', parentSpan, function () {\n                    return original.apply(_this, args);\n                });\n                plugin._endParentSpan(this);\n                return apply;\n            };\n        };\n    };\n    /**\n     * Patches the componentWillUnmount lifecycle method\n     */\n    BaseOpenTelemetryComponent.prototype._patchComponentWillUnmount = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchComponentWillUnmount() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var parentSpan = plugin._getParentSpan(this, AttributeNames.UNMOUNTING_SPAN);\n                var apply = plugin._instrumentFunction(this, 'componentWillUnmount', parentSpan, function () {\n                    return original.apply(_this, args);\n                });\n                plugin._endParentSpan(this);\n                return apply;\n            };\n        };\n    };\n    /**\n     * patch function which wraps all the lifecycle methods\n     */\n    BaseOpenTelemetryComponent.prototype.patch = function () {\n        BaseOpenTelemetryComponent._logger.debug('applying patch to', this.moduleName, VERSION);\n        if (isWrapped(this.render)) {\n            shimmer.unwrap(this, 'render');\n            BaseOpenTelemetryComponent._logger.warn('removing previous patch from method render');\n        }\n        if (isWrapped(this.componentDidMount)) {\n            shimmer.unwrap(this, 'componentDidMount');\n            BaseOpenTelemetryComponent._logger.warn('removing previous patch from method componentDidMount');\n        }\n        if (isWrapped(this.shouldComponentUpdate)) {\n            shimmer.unwrap(this, 'shouldComponentUpdate');\n            BaseOpenTelemetryComponent._logger.warn('removing previous patch from method shouldComponentUpdate');\n        }\n        if (isWrapped(this.getSnapshotBeforeUpdate)) {\n            shimmer.unwrap(this, 'getSnapshotBeforeUpdate');\n            BaseOpenTelemetryComponent._logger.warn('removing previous patch from method getSnapshotBeforeUpdate');\n        }\n        if (isWrapped(this.setState)) {\n            shimmer.unwrap(this, 'setState');\n            BaseOpenTelemetryComponent._logger.warn('removing previous patch from method setState');\n        }\n        if (isWrapped(this.forceUpdate)) {\n            shimmer.unwrap(this, 'forceUpdate');\n            BaseOpenTelemetryComponent._logger.warn('removing previous patch from method forceUpdate');\n        }\n        if (isWrapped(this.componentDidUpdate)) {\n            shimmer.unwrap(this, 'componentDidUpdate');\n            BaseOpenTelemetryComponent._logger.warn('removing previous patch from method componentDidUpdate');\n        }\n        if (isWrapped(this.componentWillUnmount)) {\n            shimmer.unwrap(this, 'componentWillUnmount');\n            BaseOpenTelemetryComponent._logger.warn('removing previous patch from method componentWillUnmount');\n        }\n        // Lifecycle methods must exist when patching, even if not defined in component\n        if (!this.render) {\n            this.render = function () {\n                return null;\n            };\n        }\n        if (!this.componentDidMount) {\n            this.componentDidMount = function () {\n                return;\n            };\n        }\n        if (!this.shouldComponentUpdate) {\n            this.shouldComponentUpdate = function () {\n                return true;\n            };\n        }\n        if (!this.getSnapshotBeforeUpdate) {\n            this.getSnapshotBeforeUpdate = function () {\n                return null;\n            };\n        }\n        if (!this.componentDidUpdate) {\n            this.componentDidUpdate = function () {\n                return;\n            };\n        }\n        if (!this.componentWillUnmount) {\n            this.componentWillUnmount = function () {\n                return;\n            };\n        }\n        shimmer.wrap(this, 'render', this._patchRender());\n        shimmer.wrap(this, 'componentDidMount', this._patchComponentDidMount());\n        shimmer.wrap(this, 'setState', this._patchSetState());\n        shimmer.wrap(this, 'forceUpdate', this._patchForceUpdate());\n        shimmer.wrap(this, 'shouldComponentUpdate', this._patchShouldComponentUpdate());\n        shimmer.wrap(this, 'getSnapshotBeforeUpdate', this._patchGetSnapshotBeforeUpdate());\n        shimmer.wrap(this, 'componentDidUpdate', this._patchComponentDidUpdate());\n        shimmer.wrap(this, 'componentWillUnmount', this._patchComponentWillUnmount());\n    };\n    /**\n     * unpatch function to unwrap all the lifecycle methods\n     */\n    BaseOpenTelemetryComponent.prototype.unpatch = function () {\n        BaseOpenTelemetryComponent._logger.debug('removing patch from', this.moduleName, VERSION);\n        shimmer.unwrap(this, 'render');\n        shimmer.unwrap(this, 'componentDidMount');\n        shimmer.unwrap(this, 'setState');\n        shimmer.unwrap(this, 'forceUpdate');\n        shimmer.unwrap(this, 'shouldComponentUpdate');\n        shimmer.unwrap(this, 'getSnapshotBeforeUpdate');\n        shimmer.unwrap(this, 'componentDidUpdate');\n        shimmer.unwrap(this, 'componentWillUnmount');\n        this._parentSpanMap = new WeakMap();\n    };\n    BaseOpenTelemetryComponent._logger = api.diag;\n    return BaseOpenTelemetryComponent;\n}(React.Component));\nexport { BaseOpenTelemetryComponent };\n//# sourceMappingURL=BaseOpenTelemetryComponent.js.map"]},"metadata":{},"sourceType":"module"}