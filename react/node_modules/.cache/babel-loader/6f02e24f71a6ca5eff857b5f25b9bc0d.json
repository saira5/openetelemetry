{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\n\nvar HttpBaggagePropagator =\n/** @class */\nfunction () {\n  function HttpBaggagePropagator() {}\n\n  HttpBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n    var baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    var keyPairs = getKeyPairs(baggage).filter(function (pair) {\n      return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n    }).slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    var headerValue = serializeKeyPairs(keyPairs);\n\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  };\n\n  HttpBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n    var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    if (!headerValue) return context;\n    var baggage = {};\n\n    if (headerValue.length === 0) {\n      return context;\n    }\n\n    var pairs = headerValue.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(function (entry) {\n      var keyPair = parsePairKeyValue(entry);\n\n      if (keyPair) {\n        var baggageEntry = {\n          value: keyPair.value\n        };\n\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  };\n\n  HttpBaggagePropagator.prototype.fields = function () {\n    return [BAGGAGE_HEADER];\n  };\n\n  return HttpBaggagePropagator;\n}();\n\nexport { HttpBaggagePropagator };","map":{"version":3,"sources":["../../../../src/baggage/propagation/HttpBaggagePropagator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAGE,WAHF,QAOO,oBAPP;AASA,SAAS,mBAAT,QAAoC,8BAApC;AACA,SACE,cADF,EAEE,uBAFF,EAGE,4BAHF,EAIE,gCAJF,QAKO,cALP;AAMA,SACE,WADF,EAEE,iBAFF,EAGE,iBAHF,QAIO,UAJP;AAMA;;;;;AAKG;;AACH,IAAA,qBAAA;AAAA;AAAA,YAAA;EAAA,SAAA,qBAAA,GAAA,CA0CC;;EAzCC,qBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,OAAP,EAAyB,OAAzB,EAA2C,MAA3C,EAAgE;IAC9D,IAAM,OAAO,GAAG,WAAW,CAAC,UAAZ,CAAuB,OAAvB,CAAhB;IACA,IAAI,CAAC,OAAD,IAAY,mBAAmB,CAAC,OAAD,CAAnC,EAA8C;IAC9C,IAAM,QAAQ,GAAG,WAAW,CAAC,OAAD,CAAX,CACd,MADc,CACP,UAAC,IAAD,EAAa;MACnB,OAAO,IAAI,CAAC,MAAL,IAAe,gCAAtB;IACD,CAHc,EAId,KAJc,CAIR,CAJQ,EAIL,4BAJK,CAAjB;IAKA,IAAM,WAAW,GAAG,iBAAiB,CAAC,QAAD,CAArC;;IACA,IAAI,WAAW,CAAC,MAAZ,GAAqB,CAAzB,EAA4B;MAC1B,MAAM,CAAC,GAAP,CAAW,OAAX,EAAoB,cAApB,EAAoC,WAApC;IACD;EACF,CAZD;;EAcA,qBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,OAAR,EAA0B,OAA1B,EAA4C,MAA5C,EAAiE;IAC/D,IAAM,WAAW,GAAW,MAAM,CAAC,GAAP,CAAW,OAAX,EAAoB,cAApB,CAA5B;IACA,IAAI,CAAC,WAAL,EAAkB,OAAO,OAAP;IAClB,IAAM,OAAO,GAAiC,EAA9C;;IACA,IAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;MAC5B,OAAO,OAAP;IACD;;IACD,IAAM,KAAK,GAAG,WAAW,CAAC,KAAZ,CAAkB,uBAAlB,CAAd;IACA,KAAK,CAAC,OAAN,CAAc,UAAA,KAAA,EAAK;MACjB,IAAM,OAAO,GAAG,iBAAiB,CAAC,KAAD,CAAjC;;MACA,IAAI,OAAJ,EAAa;QACX,IAAM,YAAY,GAAiB;UAAE,KAAK,EAAE,OAAO,CAAC;QAAjB,CAAnC;;QACA,IAAI,OAAO,CAAC,QAAZ,EAAsB;UACpB,YAAY,CAAC,QAAb,GAAwB,OAAO,CAAC,QAAhC;QACD;;QACD,OAAO,CAAC,OAAO,CAAC,GAAT,CAAP,GAAuB,YAAvB;MACD;IACF,CATD;;IAUA,IAAI,MAAM,CAAC,OAAP,CAAe,OAAf,EAAwB,MAAxB,KAAmC,CAAvC,EAA0C;MACxC,OAAO,OAAP;IACD;;IACD,OAAO,WAAW,CAAC,UAAZ,CAAuB,OAAvB,EAAgC,WAAW,CAAC,aAAZ,CAA0B,OAA1B,CAAhC,CAAP;EACD,CAtBD;;EAwBA,qBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;IACE,OAAO,CAAC,cAAD,CAAP;EACD,CAFD;;EAGF,OAAA,qBAAA;AAAC,CA1CD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar HttpBaggagePropagator = /** @class */ (function () {\n    function HttpBaggagePropagator() {\n    }\n    HttpBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        var keyPairs = getKeyPairs(baggage)\n            .filter(function (pair) {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    };\n    HttpBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        if (!headerValue)\n            return context;\n        var baggage = {};\n        if (headerValue.length === 0) {\n            return context;\n        }\n        var pairs = headerValue.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    };\n    HttpBaggagePropagator.prototype.fields = function () {\n        return [BAGGAGE_HEADER];\n    };\n    return HttpBaggagePropagator;\n}());\nexport { HttpBaggagePropagator };\n//# sourceMappingURL=HttpBaggagePropagator.js.map"]},"metadata":{},"sourceType":"module"}